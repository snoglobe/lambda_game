{"version":3,"file":"pixi-ui.mjs","sources":["../src/ButtonEvents.ts","../src/Button.ts","../src/utils/helpers/view.ts","../src/Switcher.ts","../src/utils/helpers/cleanup.ts","../src/CheckBox.ts","../src/ProgressBar.ts","../src/SliderBase.ts","../src/DoubleSlider.ts","../src/utils/helpers/text.ts","../src/utils/helpers/fit.ts","../src/FancyButton.ts","../src/Input.ts","../src/List.ts","../src/MaskedFrame.ts","../src/RadioGroup.ts","../src/utils/trackpad/Spring.ts","../src/utils/trackpad/ScrollSpring.ts","../src/utils/trackpad/SlidingNumber.ts","../src/utils/trackpad/Trackpad.ts","../src/ScrollBox.ts","../src/Select.ts","../src/Slider.ts"],"sourcesContent":["import { FederatedPointerEvent } from '@pixi/events';\nimport { isMobile } from '@pixi/core';\nimport { Signal } from 'typed-signals';\nimport { Container } from '@pixi/display';\n\n/** Events controller used for {@link Button}. */\nexport class ButtonEvents\n{\n    protected _isMouseIn: boolean;\n    protected _isDown: boolean;\n\n    /** Event that is fired when the button is down. */\n    onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when a down event happened inside the button\n     * and up event happened inside or outside of the button\n     */\n    onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when mouse up event happens outside of the button\n     * after the down event happened inside the button boundaries.\n     */\n    onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that fired when the mouse is out of the view */\n    onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the button is pressed. */\n    onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the mouse hovers the button. Fired only if device is not mobile.*/\n    onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    constructor()\n    {\n        this.onPress = new Signal();\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onHover = new Signal();\n        this.onOut = new Signal();\n        this.onUpOut = new Signal();\n    }\n\n    protected connectEvents(view: Container)\n    {\n        view.on('pointerdown', this.processDown, this);\n        view.on('pointerup', this.processUp, this);\n        view.on('pointerupoutside', this.processUpOut, this);\n        view.on('pointerout', this.processOut, this);\n        view.on('pointertap', this.processPress, this);\n        view.on('pointerover', this.processOver, this);\n    }\n\n    protected disconnectEvents(view: Container)\n    {\n        view.off('pointerdown', this.processDown, this);\n        view.off('pointerup', this.processUp, this);\n        view.off('pointerupoutside', this.processUpOut, this);\n        view.off('pointerout', this.processOut, this);\n        view.off('pointertap', this.processPress, this);\n        view.off('pointerover', this.processOver, this);\n    }\n\n    protected processDown(e: FederatedPointerEvent): void\n    {\n        this._isDown = true;\n        this.onDown.emit(this, e);\n        this.down(e);\n    }\n\n    protected processUp(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n            this.up(e);\n        }\n\n        this._isDown = false;\n    }\n\n    protected processUpOut(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n            this.onUpOut.emit(this, e);\n            this.up(e);\n            this.upOut(e);\n        }\n\n        this._isDown = false;\n    }\n\n    protected processOut(e?: FederatedPointerEvent)\n    {\n        if (this._isMouseIn)\n        {\n            this._isMouseIn = false;\n            this.onOut.emit(this, e);\n            this.out(e);\n        }\n    }\n\n    protected processPress(e: FederatedPointerEvent)\n    {\n        this._isDown = false;\n        this.onPress.emit(this, e);\n        this.press(e);\n    }\n\n    protected processOver(e: FederatedPointerEvent)\n    {\n        if (isMobile.any) return;\n\n        this._isMouseIn = true;\n        this.onHover.emit(this, e);\n        this.hover(e);\n    }\n\n    /**\n     * Method called when the button pressed.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    down(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the button is up.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    up(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the up event happens outside of the button,\n     * after the down event happened inside the button boundaries.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    upOut(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse leaves the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    out(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse press down the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    press(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse hovers the button.\n     * To be overridden.\n     * Fired only if device is not mobile.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    hover(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /** Getter that returns if the button is down. */\n    get isDown(): boolean\n    {\n        return this._isDown;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { ButtonEvents } from './ButtonEvents';\nimport { Mixin } from 'ts-mixer';\n\n/**\n * Adds button events to a given container-based view\n *\n * so you can subscribe to them and use your container-based instance as a button.\n * @example\n * const container = new Container();\n * const button = new Button(\n *      new Graphics()\n *          .beginFill(0xFFFFFF)\n *          .drawRoundedRect(0, 0, 100, 50, 15)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button.view);\n * // or container.addChild(container); which is the same\n */\nexport class Button extends ButtonEvents\n{\n    /** Container, given as a constructor parameter that is a button view. */\n    protected _view: Container;\n\n    /**\n     * Turns a given container-based view into a button by adding all button events.\n     * @param {Container} view - instance of container, to be turned into button.\n     */\n    constructor(view?: Container)\n    {\n        super();\n\n        if (view) this.init(view);\n    }\n\n    /**\n     * Creates and connect interaction events.\n     * @param {Container} view - instance of container, to be turned into button\n     */\n    init(view: Container)\n    {\n        this.view = view;\n        this.enabled = true;\n    }\n\n    /** Set button view, thar all the interaction events are applied to. */\n    set view(view: Container)\n    {\n        const wasItInitiated = !!this._view;\n\n        if (wasItInitiated) this.disconnectEvents(view);\n\n        this._view = view;\n        this.connectEvents(view);\n\n        if (!wasItInitiated) this.enabled = true;\n    }\n\n    /** Get button view, thar all the interaction events are applied to. */\n    get view(): Container\n    {\n        return this._view;\n    }\n\n    /**\n     * Switcher, which prevents all button events from firing if off.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        if (!this.view)\n        {\n            console.error('Button view is not set. Please set it before enabling the button.');\n\n            return;\n        }\n\n        this.view.eventMode = enabled ? 'static' : 'auto';\n        this.view.cursor = enabled ? 'pointer' : 'default';\n\n        if (!enabled && this.isDown)\n        {\n            this.processUp();\n        }\n    }\n\n    /** Getter that returns button state. */\n    get enabled(): boolean\n    {\n        return this.view.eventMode === 'static';\n    }\n}\n\n/**\n * Button based on container. You can use it same {@link Button}\n * but without need to pre create a container and interact with it through `.view` accessor.\n * @example\n * const button = new ButtonContainer(\n *      new Graphics()\n *          .beginFill(0xFFFFFF)\n *          .drawRoundedRect(0, 0, 100, 50, 15)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button);\n */\nexport class ButtonContainer extends Mixin(Container, Button)\n{\n    constructor(view?: Container)\n    {\n        super();\n\n        if (view)\n        {\n            this.init(view);\n        }\n    }\n\n    /**\n     * Initialize button.\n     * @param {Container} view\n     */\n    override init(view: Container)\n    {\n        this.addChild(view);\n        this.view = view;\n        this.enabled = true;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nexport function getView(view: string | Container): Container\n{\n    if (typeof view === 'string')\n    {\n        return Sprite.from(view);\n    }\n\n    return view;\n}\n","import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\nimport { ButtonEvent } from './utils/HelpTypes';\n\n/**\n * Container based component that switches visibility of a given containers by any of the interaction events.\n *\n * By default it switches on press.\n *\n * Can be used for creating buttons, tabs, radio buttons, checkboxes etc.\n * @example\n * // switch on onPress\n * const switch = new Swich([`switch_off.png`, `switch_on.png`]);\n *\n * // switch on hover\n * const button = new Swich([`button_default.png`, `button_hover.png`], ['onHover', 'onOut']);\n *\n * button.events.onPress.connect(() => console.log('button pressed'));\n */\nexport class Switcher extends Container\n{\n    protected _triggerEvents: Set<ButtonEvent> = new Set(['onPress']);\n\n    /** Container that holds all the content of the component. */\n    innerView: Container;\n\n    /** The id of the visible(active) view. */\n    protected _active: number;\n\n    /** Fired when active view changes. */\n    onChange: Signal<(state: number | boolean) => void>;\n\n    /**\n     * @param {Array<Container | string>} views - Array of views or textures that will be switching.\n     * @param triggerEvents - Button events, to switch views (can be one event or an array of events).\n     * @param activeViewID - The id of the view, visible by default.\n     */\n    constructor(views?: Array<Container | string>, triggerEvents?: ButtonEvent | ButtonEvent[], activeViewID?: number)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.onChange = new Signal();\n\n        if (views) this.views = views;\n        if (triggerEvents) this.triggerEvents = triggerEvents;\n        if (activeViewID && this.views.length > 0) this.active = activeViewID;\n\n        this.setInteractionEvents();\n    }\n\n    protected setInteractionEvents()\n    {\n        this.innerView.eventMode = 'static';\n\n        this.innerView.on('pointerdown', () => this.handleEvents('onDown'));\n        this.innerView.on('pointerup', () => this.handleEvents('onUp'));\n        this.innerView.on('pointerupoutside', () => this.handleEvents('onUpOut'));\n        this.innerView.on('pointerout', () => this.handleEvents('onOut'));\n        this.innerView.on('pointertap', () => this.handleEvents('onPress'));\n        this.innerView.on('pointerover', () => this.handleEvents('onHover'));\n    }\n\n    protected handleEvents(event: ButtonEvent)\n    {\n        if (this._triggerEvents.has(event))\n        {\n            this.switch();\n        }\n    }\n\n    /** Returns the active view. */\n    get activeView(): Container | undefined\n    {\n        if (this.views && this.views[this.active])\n        {\n            return this.views[this.active] as Container;\n        }\n\n        return undefined;\n    }\n\n    /** Sets the list of instances for switching. */\n    set views(views: Array<Container | string>)\n    {\n        this.innerView.removeChildren();\n        views.forEach((stateView) => this.add(stateView));\n    }\n\n    /** Returns all the switchable views */\n    get views(): Array<Container>\n    {\n        return this.innerView.children as Array<Container>;\n    }\n\n    /**\n     * Adds view instance to a switching list.\n     * @param view\n     */\n    add(view: Container | string): void\n    {\n        const viewInstance = getView(view);\n\n        this.innerView.addChild(viewInstance);\n\n        viewInstance.visible = false;\n\n        if (this.views.length === 1)\n        {\n            this.active = 0;\n        }\n    }\n\n    /**\n     * Removes view instance from a switching list by id.\n     * @param id - id of the view to remove.\n     */\n    remove(id: number)\n    {\n        if (this.views[id])\n        {\n            this.innerView.removeChild(this.views[id]);\n        }\n    }\n\n    /**\n     * Sets a list of events that will make a switcher switch to the next view.\n     * @param {ButtonEvent | ButtonEvent[]} triggerEvents - Button events,\n     * to switch views (can be one event or an array of events).\n     */\n    set triggerEvents(triggerEvents: ButtonEvent | ButtonEvent[])\n    {\n        this._triggerEvents = new Set(Array.isArray(triggerEvents) ? triggerEvents : [triggerEvents]);\n    }\n\n    /** Returns a list of events that will make a switcher switch to the next view. */\n    get triggerEvents(): ButtonEvent[]\n    {\n        return Array.from(this._triggerEvents);\n    }\n\n    /**\n     * Show a view by id, or to next one by order, if no ID provided.\n     * @param {number} id - optional id of the view to show. If not set, will switch to the next view.\n     */\n    switch(id?: number)\n    {\n        if (id !== undefined && id === this.active) return;\n\n        const exID = this.active;\n\n        this.forceSwitch(id);\n\n        if (exID !== this.active)\n        {\n            const res = this.views.length > 2 ? this.active : this.active === 1;\n\n            this.onChange.emit(res);\n        }\n    }\n\n    /**\n     * Switches a view to a given one without triggering the onChange event.\n     * @param {number} id - optional id of the view to show. If not set, will switch to the next view.\n     */\n    forceSwitch(id?: number)\n    {\n        if (id !== undefined && id === this.active) return;\n\n        if (this.activeView)\n        {\n            this.activeView.visible = false;\n        }\n\n        if (id !== undefined && !this.views[id])\n        {\n            throw new Error(`View with id ${id} does not exist.`);\n        }\n\n        this._active = id !== undefined ? id : this.nextActive;\n\n        if (this._active === undefined)\n        {\n            return;\n        }\n\n        this.views[this.active].visible = true;\n    }\n\n    /** Returns the id of the next view in order. Or undefined, if order is empty. */\n    protected get nextActive(): number | undefined\n    {\n        if (this.views.length === 0) return undefined;\n\n        return this.active < this.views.length - 1 ? this.active + 1 : 0;\n    }\n\n    /** Sets the id of the visible(active) view and shows to it. */\n    set active(id: number)\n    {\n        this.switch(id);\n    }\n\n    /** Gets the id of the visible(active) view. */\n    get active(): number\n    {\n        return this._active;\n    }\n}\n","import { Container } from '@pixi/display';\n\nexport function cleanup(element: Container)\n{\n    if (!element) return;\n\n    if (element.parent)\n    {\n        element.parent.removeChild(element);\n    }\n\n    element.destroy();\n    element = null;\n}\n","import { Container } from '@pixi/display';\nimport { TextStyle, ITextStyle, Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { Switcher } from './Switcher';\nimport { cleanup } from './utils/helpers/cleanup';\n\ntype LabelStyle = TextStyle | Partial<ITextStyle>;\n\ntype CheckBoxStyle = {\n    checked: Container | string;\n    unchecked: Container | string;\n    text?: LabelStyle;\n    textOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\nexport type CheckBoxOptions = {\n    style: CheckBoxStyle;\n    text?: string;\n    checked?: boolean;\n};\n\n/**\n * Creates a container-based checkbox element.\n * @example\n *  new CheckBox({\n *     style: {\n *         unchecked: `switch_off.png`,\n *         checked: `switch_on.png`,\n *     }\n *  });\n */\nexport class CheckBox extends Switcher\n{\n    //* Text label */\n    label!: Text;\n\n    /** Signal emitted when checkbox state changes. */\n    onCheck: Signal<(state: boolean) => void>;\n\n    protected _style: CheckBoxStyle;\n\n    constructor(options: CheckBoxOptions)\n    {\n        super();\n\n        this.text = options.text;\n\n        this.style = options.style;\n\n        this.checked = options.checked;\n\n        this.triggerEvents = ['onPress'];\n\n        this.innerView.cursor = 'pointer';\n\n        this.onCheck = new Signal();\n\n        this.onChange.connect(() => this.onCheck.emit(this.checked));\n    }\n\n    protected addLabel(text?: string, style?: LabelStyle)\n    {\n        if (!text) return;\n\n        this.label = new Text(text ?? '', style ?? this._style?.text);\n        this.addChild(this.label);\n\n        this.label.cursor = 'pointer';\n        this.label.eventMode = 'static';\n        this.label.on('pointertap', () => (this.checked = !this.checked));\n    }\n\n    /** Setter, which sets a checkbox text. */\n    set text(text: string)\n    {\n        if (!text)\n        {\n            cleanup(this.label);\n\n            return;\n        }\n\n        this.label ? (this.label.text = text) : this.addLabel(text);\n    }\n\n    /** Getter, which returns a checkbox text. */\n    get text(): string | ''\n    {\n        return this.label?.text ?? '';\n    }\n\n    /** Setter, which sets a checkbox style settings. */\n    set style(style: CheckBoxStyle)\n    {\n        this._style = style;\n\n        const { unchecked, checked } = style;\n\n        this.views = [unchecked, checked];\n\n        const uncheckedView = this.views[0];\n\n        if (this.label)\n        {\n            if (style.text) this.label.style = style.text;\n\n            this.label.x = uncheckedView.width + 10 + (style.textOffset?.x ?? 0);\n            this.label.y = ((uncheckedView.height - this.label.height) / 2) + (style.textOffset?.y ?? 0);\n        }\n    }\n\n    /** Getter, which returns a checkbox style settings. */\n    get style(): CheckBoxStyle\n    {\n        return this._style;\n    }\n\n    /** Getter, which returns a checkbox state. */\n    get checked(): boolean\n    {\n        return this.active === 1;\n    }\n\n    /** Setter, which sets a checkbox state. */\n    set checked(checked: boolean)\n    {\n        this.switch(checked ? 1 : 0);\n    }\n\n    /**\n     * Setter, that sets a checkbox state without emitting a signal.\n     * @param checked\n     */\n    forceCheck(checked: boolean)\n    {\n        this.forceSwitch(checked ? 1 : 0);\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\n\ntype FillOffset = {\n    x?: number;\n    y?: number;\n};\n\nexport type ProgressBarOptions = {\n    bg: Container | string;\n    fill: Container | string;\n    progress?: number;\n    fillOffset?: FillOffset;\n};\n\n/**\n * Creates a ProgressBar.\n * @example\n * new ProgressBar({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     progress: 50,\n * });\n */\nexport class ProgressBar extends Container\n{\n    protected bg!: Container;\n    protected fill!: Container;\n    protected fillMask!: Graphics;\n    protected progressStart = 0;\n    protected _progress = 0;\n\n    /** Container, that holds all inner views. */\n    innerView: Container;\n\n    constructor(params?: ProgressBarOptions)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        if (params?.bg && params?.fill)\n        {\n            this.init(params);\n        }\n    }\n\n    /**\n     * Initialize ProgressBar.\n     * @param root0\n     * @param root0.bg - Background texture.\n     * @param root0.fill - Fill texture.\n     * @param root0.fillOffset - Fill offset.\n     * @param root0.progress - Initial progress value.\n     */\n    init({ bg, fill, fillOffset, progress }: ProgressBarOptions)\n    {\n        this.setBackground(bg);\n\n        this.setFill(fill, fillOffset);\n\n        this.progress = progress;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    setBackground(bg: Container | string)\n    {\n        if (this.bg)\n        {\n            this.innerView.removeChild(this.bg);\n        }\n\n        this.bg = getView(bg);\n        this.innerView.addChildAt(this.bg, 0);\n    }\n\n    /**\n     * Set fill.\n     * @param fill\n     * @param fillOffset\n     */\n    setFill(fill: Container | string, fillOffset?: FillOffset)\n    {\n        if (this.fill)\n        {\n            this.innerView.removeChild(this.fill);\n            this.fill.destroy();\n        }\n\n        // in case if user is trying to use same instance for bg and fill\n        if (this.bg instanceof Sprite && fill === this.bg)\n        {\n            fill = Sprite.from(this.bg.texture);\n        }\n\n        this.fill = getView(fill);\n        this.innerView.addChildAt(this.fill, 1);\n\n        const offsetX = fillOffset?.x ?? 0;\n        const offsetY = fillOffset?.y ?? 0;\n\n        this.fill.x = ((this.bg.width - this.fill.width) / 2) + offsetX;\n        this.fill.y = ((this.bg.height - this.fill.height) / 2) + offsetY;\n\n        if (!this.fillMask)\n        {\n            this.fillMask = new Graphics();\n        }\n\n        this.fill.addChild(this.fillMask);\n        this.fill.mask = this.fillMask;\n    }\n\n    protected validate(progress: number): number\n    {\n        progress = Math.round(progress);\n\n        if (progress < 0)\n        {\n            return 0;\n        }\n\n        if (progress > 100)\n        {\n            return 100;\n        }\n\n        return progress;\n    }\n\n    /** Set current progress percentage value. */\n    set progress(progress: number)\n    {\n        this._progress = this.validate(progress);\n\n        if (!this.fill) return;\n\n        const startPoint = (this.fill.width / 100) * this.progressStart;\n        const endPoint = ((this.fill.width / 100) * this._progress) - startPoint;\n\n        if (this.fillMask)\n        {\n            this.fillMask.clear().lineStyle(0).beginFill(0xffffff).drawRect(startPoint, 0, endPoint, this.fill.height);\n        }\n    }\n\n    /** Return current progress percentage value. */\n    get progress(): number\n    {\n        return this._progress;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\n\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { ProgressBar } from './ProgressBar';\nimport { getView } from './utils/helpers/view';\n\nexport type BaseSliderOptions = {\n    bg: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\nexport type DoubleSliderOptions = BaseSliderOptions & {\n    slider1?: Container | string;\n    slider2?: Container | string;\n\n    value1?: number;\n    value2?: number;\n};\n\n/** Hepper class, used as a base for single or double slider creation. */\nexport class SliderBase extends ProgressBar\n{\n    protected _slider1: Container;\n    protected _slider2: Container;\n\n    protected value1Text?: Text;\n    protected value2Text?: Text;\n\n    protected _value1: number;\n    protected _value2: number;\n\n    protected dragging = 0;\n\n    /** Minimal value. */\n    min = 0;\n\n    /** Maximal value. */\n    max = 100;\n\n    protected startUpdateValue1!: number;\n    protected startUpdateValue2!: number;\n\n    protected settings: DoubleSliderOptions;\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super();\n\n        this.setBackground(options.bg);\n\n        if (options.fill)\n        {\n            this.setFill(options.fill, options.fillOffset);\n        }\n\n        this.settings = options;\n\n        this.slider1 = options.slider1;\n        this.slider2 = options.slider2;\n\n        this.min = options.min ?? 0;\n        this.max = options.max ?? 100;\n\n        this.activate();\n    }\n\n    /**\n     * Sets Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider1(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider1)\n        {\n            this.slider1.removeAllListeners();\n            this.removeChild(this._slider1);\n            this.slider1.destroy();\n        }\n\n        this._slider1 = this.createSlider(value);\n\n        this._slider1.eventMode = 'static';\n\n        this._slider1\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n\n        if (this.settings.showValue && !this.value1Text)\n        {\n            this.value1Text = new Text('', this.settings.valueTextStyle || { fill: 0xffffff });\n            this.value1Text.anchor.set(0.5);\n            this.addChild(this.value1Text);\n        }\n    }\n\n    /** Get Slider1 instance. */\n    get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider2 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider2(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider2)\n        {\n            this.slider2.removeAllListeners();\n            this.removeChild(this._slider2);\n            this.slider2.destroy();\n        }\n\n        this._slider2 = this.createSlider(value);\n\n        this._slider2.eventMode = 'static';\n\n        this._slider2\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n\n        if (this.settings.showValue && !this.value2Text)\n        {\n            this.value2Text = new Text('', this.settings.valueTextStyle || { fill: 0xffffff });\n            this.value2Text.anchor.set(0.5);\n            this.addChild(this.value2Text);\n        }\n    }\n\n    /** Get Slider2 instance. */\n    get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    override setBackground(bg: Container | string)\n    {\n        if (this.bg)\n        {\n            this.bg.removeAllListeners();\n        }\n\n        super.setBackground(bg);\n\n        this.activate();\n    }\n\n    protected activate()\n    {\n        this.bg.eventMode = 'static';\n        this.bg\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n\n        if (this.fill)\n        {\n            this.fill.eventMode = 'none';\n        }\n\n        if (this.value1Text)\n        {\n            this.value1Text.eventMode = 'none';\n        }\n\n        if (this.value2Text)\n        {\n            this.value2Text.eventMode = 'none';\n        }\n    }\n\n    protected createSlider(sliderData: Container | string): Container\n    {\n        const slider = getView(sliderData);\n\n        slider.x = slider.width / 2;\n\n        const container = new Container();\n\n        container.addChild(slider);\n\n        if (slider instanceof Sprite)\n        {\n            slider.anchor.set(0.5);\n        }\n\n        container.y = this.bg.height / 2;\n\n        this.addChild(container);\n\n        return container;\n    }\n\n    protected startUpdate(event: FederatedPointerEvent)\n    {\n        this.dragging = 1;\n        this.startUpdateValue1 = this._value1;\n        this.startUpdateValue2 = this._value2;\n        this.update(event);\n    }\n\n    protected endUpdate()\n    {\n        if (!this.dragging) return;\n        this.dragging = 0;\n\n        if (this.startUpdateValue1 !== this._value1 || this.startUpdateValue2 !== this._value2)\n        {\n            this.change();\n        }\n\n        this.startUpdateValue1 = null;\n        this.startUpdateValue2 = null;\n    }\n\n    /* Called when dragging started and on every move. */\n    protected update(_event: FederatedPointerEvent)\n    {\n    // override me\n    }\n\n    /** Called when dragging stopped. */\n    protected change()\n    {\n    // override me\n    }\n}\n","import { FederatedPointerEvent } from '@pixi/events';\nimport type { DragObject } from './utils/HelpTypes';\nimport { DoubleSliderOptions, SliderBase } from './SliderBase';\nimport { Signal } from 'typed-signals';\nimport { Container } from '@pixi/display';\n\n/**\n * Creates a slider with range selection option.\n * @example\n * const doubleSlider = new DoubleSlider({\n *      bg: 'slider_bg.png',\n *      fill: 'slider_progress.png',\n *      slider1: 'slider.png',\n *      slider2: 'slider.png',\n *  });\n *\n * doubleSlider.onChange.connect((value1, value2) =>\n *     console.log(`New slider range ${value1} - ${value2}`)S\n * );\n */\n\nexport class DoubleSlider extends SliderBase\n{\n    protected options: DoubleSliderOptions;\n\n    protected activeValue: 'value1' | 'value2';\n\n    /** Signal that fires when value have changed. */\n    onChange: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    /** Signal that fires when value is changing. */\n    onUpdate: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super(options);\n\n        this.options = options;\n        this.setInitialState();\n    }\n\n    protected setInitialState()\n    {\n        this.validateValues();\n\n        const { value1, value2 } = this.options;\n\n        this.updateProgress(value1, value2);\n\n        this.value2 = value2;\n        this.value1 = value1;\n    }\n\n    protected updateProgress(value1 = this.value1, value2 = this.value2)\n    {\n        this.progressStart = ((value1 - this.min) / (this.max - this.min)) * 100;\n        this.progress = ((value2 - this.min) / (this.max - this.min)) * 100;\n    }\n\n    protected validateValues()\n    {\n        if (!this.options.value1)\n        {\n            this.options.value1 = this.min;\n        }\n\n        if (!this.options.value2)\n        {\n            this.options.value2 = this.options.max;\n        }\n\n        if (this.options.value2 < this.options.value1)\n        {\n            this.options.value2 = this.options.value1;\n        }\n\n        if (this.options.value1 < this.options.min)\n        {\n            this.options.value1 = this.options.min;\n        }\n\n        if (this.options.value1 > this.options.max)\n        {\n            this.options.value1 = this.options.max;\n        }\n\n        if (this.options.value2 > this.options.max)\n        {\n            this.options.value2 = this.options.max;\n        }\n    }\n\n    /** Returns left value. */\n    get value1(): number\n    {\n        return this._value1;\n    }\n\n    /** Sets left value. */\n    set value1(value1: number)\n    {\n        if (value1 === this._value1) return;\n\n        if (value1 < this.min) value1 = this.min;\n        if (value1 > this._value2) value1 = this._value2;\n\n        this._value1 = value1;\n\n        this.updateSlider1();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    /** Returns right value. */\n    get value2(): number\n    {\n        return this._value2;\n    }\n\n    /** Sets right value. */\n    set value2(value2: number)\n    {\n        if (value2 === this._value2) return;\n\n        if (value2 < this._value1) value2 = this._value1;\n        if (value2 > this.max) value2 = this.max;\n\n        this._value2 = value2;\n\n        this.updateSlider2();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        const slider1Dist = Math.abs(x - this._slider1.x - this._slider1.width);\n        const slider2Dist = Math.abs(x - this._slider2.x);\n\n        if (!this.activeValue)\n        {\n            if (this.slider1 && x < this.slider1.x)\n            {\n                this.activeValue = 'value1';\n            }\n            else if (this.slider2 && x > this.slider2.x)\n            {\n                this.activeValue = 'value2';\n            }\n            else\n            {\n                this.activeValue = slider1Dist < slider2Dist ? 'value1' : 'value2';\n            }\n        }\n\n        const progress = this.validate((x / this.bg.width) * 100);\n\n        if (this.activeValue === 'value1')\n        {\n            this.progressStart = progress;\n            this.value1 = this.min + (((this.max - this.min) / 100) * progress);\n            this.updateProgress(this.value1, this.value2);\n        }\n        else\n        {\n            this.progress = progress;\n            this.value2 = this.min + (((this.max - this.min) / 100) * progress);\n        }\n    }\n\n    protected override endUpdate()\n    {\n        super.endUpdate();\n\n        this.activeValue = null;\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    /**\n     * Set Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider1(value: Container | string)\n    {\n        super.slider1 = value;\n        this.updateSlider1();\n    }\n\n    /** Get Slider1 instance. */\n    override get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider2(value: Container | string)\n    {\n        super.slider2 = value;\n        this.updateSlider2();\n    }\n\n    /** Get Slider2 instance. */\n    override get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    protected updateSlider1()\n    {\n        this._slider1.x = ((this.bg.width - this._slider1.width) / 100) * this.progressStart;\n\n        if (this._slider2 && this._slider1.x > this._slider2.x)\n        {\n            this._slider1.x = this._slider2.x;\n        }\n\n        if (this.options?.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value1)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    protected updateSlider2()\n    {\n        this._slider2.x = ((this.bg.width - this._slider2.width) / 100) * this.progress;\n\n        if (this._slider2.x < this._slider1.x)\n        {\n            this._slider2.x = this._slider1.x;\n        }\n\n        if (this.options?.showValue)\n        {\n            this.value2Text.text = `${Math.round(this.value2)}`;\n\n            const sliderPosX = this._slider2.x + (this._slider2.width / 2);\n            const sliderPosY = this._slider2.y;\n\n            this.value2Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value2Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n    }\n}\n","import { Text } from '@pixi/text';\nimport { BitmapText } from '@pixi/text-bitmap';\nimport { HTMLText } from '@pixi/text-html';\n\nexport type PixiText = Text | BitmapText | HTMLText;\nexport type AnyText = string | number | PixiText;\n\nexport function getTextView(text: AnyText): Text | BitmapText | HTMLText\n{\n    if (typeof text === 'string' || typeof text === 'number')\n    {\n        return new Text(String(text));\n    }\n\n    return text;\n}\n","import { Container } from '@pixi/display';\n\nexport function fitToView(parent: Container, child: Container, padding = 0)\n{\n    let scaleX = child.scale.x;\n    let scaleY = child.scale.y;\n\n    const maxWidth = parent.width - (padding * 2);\n    const maxHeight = parent.height - (padding * 2);\n\n    const widthOverflow = maxWidth - Math.round(child.width);\n    const heightOverflow = maxHeight - Math.round(child.height);\n\n    if (widthOverflow < 0)\n    {\n        scaleX = maxWidth / (child.width * scaleX);\n    }\n\n    if (heightOverflow < 0)\n    {\n        scaleY = maxHeight / (child.height * scaleY);\n    }\n\n    if (scaleX <= 0 || scaleY <= 0)\n    {\n        child.visible = false;\n    }\n\n    child.scale.set(Math.min(scaleX, scaleY));\n}\n","import { ObservablePoint, Ticker, Rectangle } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\nimport { AnyText, getTextView, PixiText } from './utils/helpers/text';\nimport { Button } from './Button';\nimport { Signal } from 'typed-signals';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { fitToView } from './utils/helpers/fit';\nimport { Tween, Group } from 'tweedle.js';\n\nconst states = ['default', 'hover', 'pressed', 'disabled'] as const;\n\ntype State = typeof states[number];\ntype Pos = { x?: number; y?: number };\ntype PosList = { [K in State]?: Pos };\n\nexport type Offset = Pos & PosList;\n\ntype Views = {\n    defaultView?: string | Container;\n    hoverView?: string | Container;\n    pressedView?: string | Container;\n    disabledView?: string | Container;\n    text?: AnyText;\n    icon?: string | Container;\n};\n\ntype ButtonViews = {\n    default?: Container;\n    hover?: Container;\n    pressed?: Container;\n    disabled?: Container;\n    text?: PixiText;\n    icon?: Container;\n};\n\ntype AnimationData = {\n    x?: number;\n    y?: number;\n    width?: number;\n    height?: number;\n    scale?: Pos;\n};\ntype Animation = {\n    props: AnimationData;\n    duration?: number;\n};\ntype StateAnimations = {\n    [K in State]?: Animation;\n};\n\nexport type ButtonOptions = Views & {\n    padding?: number;\n    scale?: number;\n    anchor?: number;\n    anchorX?: number;\n    anchorY?: number;\n    offset?: Offset;\n    textOffset?: Offset;\n    iconOffset?: Offset;\n    animations?: StateAnimations;\n};\n\n/**\n * Button component with a lots of tweaks, to create a button fast.\n *\n *  By default text view and icon view are centered in the active view.\n *\n * If views are not the same size, offset property of the constructor\n * can be used to adjust the position of the text, icon and the views.\n * @example\n * const button = new FancyButton({\n *     defaultView: `button.png`,\n *     hoverView: `button_hover.png`,\n *     pressedView: `button_pressed.png`,\n *     text: new Text('Click me!'),\n *     animations: {\n *          hover: {\n *              props: {\n *                  scale: {\n *                      x: 1.1,\n *                      y: 1.1,\n *                  }\n *              },\n *              duration: 100,\n *          },\n *          pressed: {\n *              props: {\n *                  scale: {\n *                      x: 0.9,\n *                      y: 0.9,\n *                  }\n *              },\n *              duration: 100,\n *          }\n *      }\n * });\n *\n * button.onPress.connect(() => console.log('Button pressed!'));\n */\nexport class FancyButton extends Container\n{\n    protected events: Button;\n    protected animations: StateAnimations;\n    protected originalInnerViewState: AnimationData;\n    protected defaultDuration = 100;\n\n    /** Padding of the button text view. If button text does not fit active view + padding it will scale down to fit. */\n    padding: number;\n\n    /** Offset of the button state views. If state views have different sizes, this option can help adjust them. */\n    offset: Offset & Pos;\n\n    /** Offset of the text view. Can be set to any state of the button. */\n    textOffset: Offset;\n\n    /** Offset of the icon view. Can be set to any state of the button. */\n    iconOffset: Offset;\n\n    //* View that holds all button inner views */\n    innerView: Container;\n\n    protected _views: ButtonViews = {};\n\n    /** State of the button. Possible valuers are: 'default', 'hover', 'pressed', 'disabled' */\n    state: State;\n\n    /** Anchor point of the button. */\n    anchor: ObservablePoint;\n\n    /** Event that is fired when the button is down. */\n    onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when a down event happened inside the button\n     * and up event happened inside or outside of the button\n     */\n    onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when mouse up event happens outside of the button\n     * after the down event happened inside the button boundaries.\n     */\n    onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that fired when the mouse is out of the view */\n    onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the button is pressed. */\n    onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the mouse hovers the button. Fired only if device is not mobile.*/\n    onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /**\n     * Turns a given container-based view into a button by adding all button events.\n     * @param {object} options - Button options.\n     * @param {Container} options.defaultView - Container-based view that is shown when non of the button events are active.\n     * @param {Container} options.hoverView - Container-based view that is shown when the mouse hovers over the button.\n     * @param {Container} options.pressedView - Container-based view, shown when the mouse press on the component.\n     * @param {Container} options.disabledView - Container-based view shown when the button is disabled.\n     * @param {Container} options.icon - Container-based view for the button icon.\n     * @param {Text} options.text - Text-based view for the button text.\n     * @param {number} options.padding - Padding of the button text and icon views.\n     * If button text or icon does not fit active view + padding it will scale down to fit.\n     * @param {Point} options.offset - Offset of the button state views.\n     * @param {Point} options.textOffset - Offset of the text view.\n     * @param {Point} options.iconOffset - Offset of the icon view.\n     * @param {number} options.scale - Scale of the button. Scale will be applied to a main container,\n     * when all animations scales will be applied to the inner view.\n     * @param {number} options.anchor - Anchor point of the button.\n     * @param {number} options.anchorX - Horizontal anchor point of the button.\n     * @param {number} options.anchorY - Vertical anchor point of the button.\n     * @param options.animations - Animations that will be played when the button state changes.\n     */\n    constructor({\n        defaultView,\n        hoverView,\n        pressedView,\n        disabledView,\n        text,\n        padding,\n        offset,\n        textOffset,\n        iconOffset,\n        scale,\n        anchor,\n        anchorX,\n        anchorY,\n        icon,\n        animations\n    }: ButtonOptions)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.anchor = new ObservablePoint(this.updateAnchor, this);\n        this.anchor.set(anchorX ?? anchor ?? 0, anchorY ?? anchor ?? 0);\n\n        this.padding = padding ?? 0;\n        this.offset = offset;\n        this.textOffset = textOffset;\n        this.iconOffset = iconOffset;\n        this.scale.set(scale ?? 1);\n\n        if (animations)\n        {\n            this.animations = animations;\n            Ticker.shared.add(() => Group.shared.update());\n        }\n\n        this.views = {\n            defaultView,\n            hoverView,\n            pressedView,\n            disabledView,\n            text,\n            icon\n        };\n\n        this.setState('default');\n\n        this.addEvents();\n    }\n\n    /**\n     * Updates the text of the button and updates its scaling basing on the new size.\n     * @param {string | number} text\n     */\n    set text(text: string | number | null)\n    {\n        if (!text || text === 0)\n        {\n            this.innerView.removeChild(this._views.text);\n            this._views.text = null;\n\n            return;\n        }\n\n        if (!this._views.text)\n        {\n            this.createTextView(text);\n\n            return;\n        }\n\n        this._views.text.text = text.toString();\n    }\n\n    /** Returns the text string of the button text element. */\n    get text(): string | undefined\n    {\n        return this._views.text?.text;\n    }\n\n    /**\n     * Setter, that prevents all button events from firing.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        this.events.enabled = enabled;\n\n        this.setState(enabled ? 'default' : 'disabled');\n    }\n\n    /** Getter that returns button state, that controls if button events are firing. */\n    get enabled(): boolean\n    {\n        return this.events.enabled;\n    }\n\n    /**\n     * Updates button state and shows the according views.\n     *\n     * Updates positions and offsets of the views.\n     *\n     * Plays animations if they are set.\n     * @param {State} newState\n     */\n    setState(newState: State)\n    {\n        if (this.state === newState)\n        {\n            return;\n        }\n\n        const currentView = this.getStateView(this.state);\n        const activeView = this.getStateView(newState);\n\n        if (currentView) currentView.visible = false;\n\n        this.state = newState;\n\n        if (activeView)\n        {\n            this.setOffset(activeView, newState, this.offset);\n            activeView.visible = true;\n        }\n\n        this.updateAnchor();\n\n        this.playAnimations(newState);\n    }\n\n    /**\n     *\n     * Manage button text view.\n     * @param {string | Text} text - can be a string, Text, BitmapText ot HTMLText (Container-based element).\n     */\n    protected createTextView(text: AnyText)\n    {\n        if (!this._views.text)\n        {\n            this._views.text = getTextView(text);\n            this._views.text.anchor.set(0);\n            this.innerView.addChild(this._views.text);\n        }\n\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Manages views offsets if it's set.\n     * @param view\n     * @param state\n     * @param offset\n     */\n    protected setOffset(view: Container, state: State, offset: Offset)\n    {\n        const stateOffset = offset\n            ? offset[state]\n            : {\n                x: 0,\n                y: 0\n            };\n\n        const defaultStateOffset = offset?.default;\n\n        if (stateOffset)\n        {\n            view.x += stateOffset.x ?? 0;\n            view.y += stateOffset.y ?? 0;\n        }\n        else if (defaultStateOffset)\n        {\n            view.x += defaultStateOffset.x ?? 0;\n            view.y += defaultStateOffset.y ?? 0;\n        }\n        else if (offset.x || offset.y)\n        {\n            view.x += offset.x ?? 0;\n            view.y += offset.y ?? 0;\n        }\n    }\n\n    /**\n     * Returns active view for the state.\n     * @param state\n     */\n    protected getStateView(state: State): Container | undefined\n    {\n        const { default: defaultView, hover, pressed, disabled } = this._views;\n\n        switch (state)\n        {\n            case 'hover':\n                return hover ?? defaultView;\n            case 'pressed':\n                return pressed ?? hover ?? defaultView;\n            case 'disabled':\n                return disabled ?? defaultView;\n            case 'default':\n                return defaultView;\n            default:\n                return undefined;\n        }\n    }\n\n    /**\n     * Adjusts text view position and scale.\n     * @param {State} state\n     */\n    protected adjustTextView(state: State)\n    {\n        if (!this.text) return;\n\n        const activeView = this.getStateView(this.state);\n\n        if (activeView)\n        {\n            fitToView(activeView, this._views.text, this.padding);\n\n            this._views.text.x = activeView.x + (activeView.width / 2);\n            this._views.text.y = activeView.y + (activeView.height / 2);\n        }\n\n        this._views.text.anchor.set(0.5);\n\n        this.setOffset(this._views.text, state, this.textOffset);\n    }\n\n    /**\n     * Adjusts icon view position and scale.\n     * @param {State} state\n     */\n    protected adjustIconView(state: State)\n    {\n        if (!this._views.icon)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(state);\n\n        fitToView(activeView, this._views.icon, this.padding);\n\n        (this._views.icon as Sprite).anchor?.set(0);\n\n        this._views.icon.x = activeView.x + (activeView.width / 2) - (this._views.icon.width / 2);\n        this._views.icon.y = activeView.y + (activeView.height / 2) - (this._views.icon.height / 2);\n\n        this.setOffset(this._views.icon, state, this.iconOffset);\n    }\n\n    /**\n     * Reset views positions according to the button anchor setting.\n     * We have to set the anchor position for each view individually, as each of them\n     * can be a different type of view (container without anchor, sprite with anchor, etc)\n     * we have to reset all anchors to 0,0 and then set the positions manually.\n     */\n    protected updateAnchor()\n    {\n        const anchorX = this.anchor.x ?? 0;\n        const anchorY = this.anchor.y ?? 0;\n        const views = [this._views.default, this._views.hover, this._views.pressed, this._views.disabled];\n\n        views.forEach((view) =>\n        {\n            if (!view) return;\n\n            (view as Sprite).anchor?.set(0);\n\n            view.x = -view.width * anchorX;\n            view.y = -view.height * anchorY;\n        });\n\n        if (this._views.default)\n        {\n            const { x, y, width, height } = this._views.default;\n\n            this.hitArea = new Rectangle(x, y, width, height);\n        }\n\n        this.adjustIconView(this.state);\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Set button views according to the config.\n     * If state view is not set (undefined), it will not be changed,\n     * so if it was set before, it will remain the same.\n     * If state view is set to null, it will be removed from the button.\n     * If state view is set it will be updated or added to a button.\n     * @param {Views} views\n     */\n    // eslint-disable-next-line accessor-pairs\n    set views(views: Views)\n    {\n        const { defaultView, hoverView, pressedView, disabledView, text, icon } = views;\n\n        if (defaultView)\n        {\n            this._views.default = getView(defaultView);\n            this.setOffset(this._views.default, 'default', this.offset);\n            if (!this._views.default.parent)\n            {\n                this.innerView.addChild(this._views.default);\n            }\n        }\n        else if (defaultView === null && this._views.default)\n        {\n            this.innerView.removeChild(this._views.default);\n            this._views.default = null;\n        }\n\n        if (hoverView)\n        {\n            this._views.hover = getView(hoverView);\n\n            if (!this._views.hover.parent)\n            {\n                this.innerView.addChild(this._views.hover);\n            }\n\n            this._views.hover.visible = false;\n        }\n        else if (hoverView === null && this._views.hover)\n        {\n            this.innerView.removeChild(this._views.hover);\n            this._views.hover = null;\n        }\n\n        if (pressedView)\n        {\n            this._views.pressed = getView(pressedView);\n\n            if (!this._views.pressed.parent)\n            {\n                this.innerView.addChild(this._views.pressed);\n            }\n\n            this._views.pressed.visible = false;\n        }\n        else if (pressedView === null && this._views.pressed)\n        {\n            this.innerView.removeChild(this._views.pressed);\n            this._views.pressed = null;\n        }\n\n        if (disabledView)\n        {\n            this._views.disabled = getView(disabledView);\n\n            if (!this._views.disabled.parent)\n            {\n                this.innerView.addChild(this._views.disabled);\n            }\n\n            this._views.disabled.visible = false;\n        }\n        else if (disabledView === null && this._views.disabled)\n        {\n            this.innerView.removeChild(this._views.disabled);\n            this._views.disabled = null;\n        }\n\n        if (icon)\n        {\n            this._views.icon = getView(icon);\n\n            if (!this._views.icon.parent)\n            {\n                this.innerView.addChild(this._views.icon);\n            }\n        }\n        else if (icon === null && this._views.icon)\n        {\n            this.innerView.removeChild(this._views.icon);\n            this._views.icon = null;\n        }\n\n        if (text)\n        {\n            this.createTextView(text);\n        }\n        else if (text === null && this._views.text)\n        {\n            this.innerView.removeChild(this._views.text);\n            this._views.text = null;\n        }\n    }\n\n    /** Creates all button events */\n    protected addEvents()\n    {\n        this.events = new Button(this);\n\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onUpOut = new Signal();\n        this.onOut = new Signal();\n        this.onPress = new Signal();\n        this.onHover = new Signal();\n\n        this.events.onDown.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onDown.emit(this, e);\n            this.down();\n            this.setState('pressed');\n        });\n\n        this.events.onUp.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUp.emit(this, e);\n            this.up();\n            this.setState('hover');\n        });\n\n        this.events.onUpOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUpOut.emit(this, e);\n            this.upOut();\n            this.setState('default');\n        });\n\n        this.events.onOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onOut.emit(this, e);\n            this.out();\n\n            if (!this.events.isDown)\n            {\n                this.setState('default');\n            }\n        });\n\n        this.events.onPress.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onPress.emit(this, e);\n            this.press();\n            this.setState('hover');\n        });\n\n        this.events.onHover.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onHover.emit(this, e);\n            this.hover();\n\n            if (!this.events.isDown)\n            {\n                this.setState('hover');\n            }\n        });\n    }\n\n    /**\n     * Starts animation for the current button state if configured.\n     * @param {State} state\n     */\n    protected playAnimations(state: State)\n    {\n        if (!this.animations) return;\n\n        if (state === 'default' && !this.originalInnerViewState)\n        {\n            this.originalInnerViewState = {\n                x: this.innerView.x,\n                y: this.innerView.y,\n                width: this.innerView.width,\n                height: this.innerView.height,\n                scale: {\n                    x: this.innerView.scale.x,\n                    y: this.innerView.scale.y\n                }\n            };\n\n            // first animation state is default, so we don't need to animate it\n            // this part will run only once, during initialization\n            const defaultStateAnimation = this.animations?.default;\n\n            if (defaultStateAnimation)\n            {\n                this.innerView.x = defaultStateAnimation.props.x ?? this.originalInnerViewState.x;\n                this.innerView.y = defaultStateAnimation.props.y ?? this.originalInnerViewState.y;\n                this.innerView.width = defaultStateAnimation.props.width ?? this.originalInnerViewState.width;\n                this.innerView.height = defaultStateAnimation.props.height ?? this.originalInnerViewState.height;\n                this.innerView.scale.x = defaultStateAnimation.props.scale.x ?? this.originalInnerViewState.scale.x;\n                this.innerView.scale.y = defaultStateAnimation.props.scale.y ?? this.originalInnerViewState.scale.y;\n\n                return;\n            }\n        }\n\n        const stateAnimation = this.animations[state] ?? this.animations.default;\n\n        if (stateAnimation)\n        {\n            const data = stateAnimation;\n\n            this.defaultDuration = data.duration;\n\n            new Tween(this.innerView).to(data.props, data.duration).start();\n\n            return;\n        }\n\n        // if there is no animation for the current state, animate the button to the default state\n        new Tween(this.innerView).to(this.originalInnerViewState, this.defaultDuration).start();\n    }\n\n    /**\n     * Method called when the button pressed.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    down(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the button is up.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    up(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the up event happens outside of the button,\n     * after the down event happened inside the button boundaries.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    upOut(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse leaves the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    out(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse press down the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    press(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse hovers the button.\n     * To be overridden.\n     * Fired only if device is not mobile.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    hover(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n}\n","import { Texture, utils, Ticker } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { TextStyle, Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\nimport { Padding } from './utils/HelpTypes';\n\nexport type InputOptions = {\n    bg?: Container | string;\n    textStyle?: Partial<TextStyle>;\n    placeholder?: string;\n    value?: string;\n    maxLength?: number;\n    align?: 'left' | 'center' | 'right';\n    padding?: Padding;\n};\n\n/**\n * Container-based component that creates an input to read the user's text.\n * @example\n * new Input({\n *     bg: Sprite.from('input.png'),\n *     placeholder: 'Enter text',\n *     padding: {\n *      top: 11,\n *      right: 11,\n *      bottom: 11,\n *      left: 11\n *     } // alternatively you can use [11, 11, 11, 11] or [11, 11] or just 11\n * });\n */\nexport class Input extends Container\n{\n    protected _bg?: Container;\n    protected _cursor: Sprite;\n    protected inputMask: Graphics;\n    protected inputField: Text;\n    protected placeholder: Text;\n    protected editing = false;\n    protected tick = 0;\n\n    protected activation = false;\n    protected readonly options: InputOptions;\n\n    /** Fires when input loses focus. */\n    onEnter: Signal<(text: string) => void>;\n\n    /** Fires every time input string is changed. */\n    onChange: Signal<(text: string) => void>;\n\n    /** Top side padding */\n    paddingTop = 0;\n\n    /** Right side padding */\n    paddingRight = 0;\n\n    /** Bottom side padding */\n    paddingBottom = 0;\n\n    /** Left side padding */\n    paddingLeft = 0;\n\n    constructor(options: InputOptions)\n    {\n        super();\n\n        this.options = options;\n        this.padding = options.padding;\n\n        this.cursor = 'text';\n        this.interactive = true;\n\n        this.on('pointertap', () => (this.activation = true));\n\n        if (utils.isMobile.any)\n        {\n            window.addEventListener('touchstart', () => this.handleActivation());\n\n            let keyboard = document.getElementById('v-keyboard') as HTMLInputElement;\n\n            if (!keyboard)\n            {\n                keyboard = document.createElement('input');\n\n                document.body.appendChild(keyboard);\n                keyboard.setAttribute('id', 'v-keyboard');\n\n                keyboard.style.opacity = '0';\n            }\n\n            keyboard.oninput = () =>\n            {\n                let value = keyboard.value;\n\n                const maxLength = this.options.maxLength;\n\n                if (maxLength && value.length > this.options.maxLength)\n                {\n                    value = value.substring(0, maxLength);\n                    keyboard.value = value;\n                }\n\n                this.value = value;\n\n                this.onChange.emit(this.value);\n            };\n        }\n        else\n        {\n            window.addEventListener('click', () =>\n            {\n                this.handleActivation();\n            });\n\n            window.addEventListener('keydown', (e) =>\n            {\n                const key = e.key;\n\n                if (key === 'Backspace')\n                {\n                    this._delete();\n                }\n                else if (key === 'Escape' || key === 'Enter')\n                {\n                    this.stopEditing();\n                }\n                else if (key.length === 1) this._add(key);\n            });\n        }\n\n        this.onEnter = new Signal();\n        this.onChange = new Signal();\n\n        Ticker.shared.add((delta) => this.update(delta));\n\n        if (options.bg)\n        {\n            this.bg = options.bg;\n        }\n        else\n        {\n            console.error('Input: bg is not defined, please define it.');\n        }\n    }\n\n    protected init()\n    {\n        const options = this.options;\n\n        const defaultTextStyle = {\n            fill: 0x000000,\n            align: 'center'\n        } as TextStyle;\n\n        const textStyle = new TextStyle(options.textStyle ?? defaultTextStyle);\n\n        this.inputField = new Text('', textStyle);\n\n        this._cursor = new Sprite(Texture.WHITE);\n        this._cursor.tint = Number(options.textStyle.fill) || 0x000000;\n        this._cursor.anchor.set(0.5);\n        this._cursor.width = 2;\n        this._cursor.height = this.inputField.height * 0.8;\n        this._cursor.alpha = 0;\n\n        this.placeholder = new Text(options.placeholder, textStyle ?? defaultTextStyle);\n        this.placeholder.visible = !!options.placeholder;\n\n        this.addChild(this.inputField, this.placeholder, this._cursor);\n\n        this.value = options.value ?? '';\n\n        this.align();\n    }\n\n    set bg(bg: Container | string)\n    {\n        this._bg = getView(bg);\n        this._bg.cursor = 'text';\n        this._bg.interactive = true;\n\n        if (!this._bg.parent)\n        {\n            this.addChild(this._bg);\n        }\n\n        if (!this.inputField)\n        {\n            this.init();\n        }\n\n        this.inputMask = new Graphics()\n            .beginFill(0xffffff)\n            .drawRect(\n                this.paddingLeft,\n                this.paddingTop,\n                this._bg.width - this.paddingRight - this.paddingLeft,\n                this._bg.height - this.paddingBottom - this.paddingTop\n            );\n\n        this.inputField.mask = this.inputMask;\n\n        this._cursor.mask = this.inputMask;\n\n        if (!this.inputMask.parent)\n        {\n            this.addChild(this.inputMask);\n        }\n    }\n\n    get bg(): Container | string\n    {\n        return this._bg;\n    }\n\n    protected _add(key: string): void\n    {\n        if (!this.editing)\n        {\n            return;\n        }\n\n        if (this.options.maxLength && this.value.length >= this.options.maxLength)\n        {\n            return;\n        }\n\n        this.value = this.value + key;\n\n        this.onChange.emit(this.value);\n    }\n\n    protected _delete(): void\n    {\n        if (!this.editing || this.value.length === 0) return;\n        const array = this.value.split('');\n\n        array.pop();\n        this.value = array.join('');\n\n        this.onChange.emit(this.value);\n    }\n\n    protected _startEditing(): void\n    {\n        this.tick = 0;\n        this.editing = true;\n        this.placeholder.visible = false;\n        this._cursor.alpha = 1;\n\n        if (utils.isMobile.any)\n        {\n            const keyboard = document.getElementById('v-keyboard') as HTMLInputElement;\n\n            keyboard.focus();\n            keyboard.click();\n            keyboard.value = this.value;\n        }\n\n        this.align();\n    }\n\n    protected handleActivation()\n    {\n        this.stopEditing();\n\n        if (this.activation)\n        {\n            this._startEditing();\n\n            this.activation = false;\n        }\n    }\n\n    protected stopEditing(): void\n    {\n        if (!this.editing) return;\n\n        this._cursor.alpha = 0;\n        this.editing = false;\n\n        if (this.inputField.text === '')\n        {\n            this.placeholder.visible = true;\n        }\n\n        if (this.value.length === 0) this.placeholder.visible = true;\n        if (utils.isMobile.any) document.getElementById('v-keyboard')?.blur();\n\n        this.align();\n\n        this.onEnter.emit(this.value);\n    }\n\n    protected update(dt: number): void\n    {\n        if (!this.editing) return;\n        this.tick += dt * 0.1;\n        this._cursor.alpha = Math.round((Math.sin(this.tick) * 0.5) + 0.5);\n    }\n\n    protected align()\n    {\n        if (!this._bg) return;\n\n        const align = this.getAlign();\n\n        this.inputField.anchor.set(align, 0.5);\n        this.inputField.x = (this._bg.width * align) + (align === 1 ? -this.paddingRight : this.paddingLeft);\n        this.inputField.y = (this._bg.height / 2) + this.paddingTop - this.paddingBottom;\n\n        this.placeholder.anchor.set(align, 0.5);\n        this.placeholder.x = (this._bg.width * align) + (align === 1 ? -this.paddingRight : this.paddingLeft);\n        this.placeholder.y = this._bg.height / 2;\n\n        this._cursor.x = this.getCursorPosX();\n        this._cursor.y = this.inputField.y;\n    }\n\n    protected getAlign(): 0 | 1 | 0.5\n    {\n        const maxWidth = this._bg.width * 0.95;\n        const paddings = this.paddingLeft + this.paddingRight - 10;\n        const isOverflowed = this.inputField.width + paddings > maxWidth;\n\n        if (isOverflowed)\n        {\n            return this.editing ? 1 : 0;\n        }\n        switch (this.options.align)\n        {\n            case 'left':\n                return 0;\n            case 'center':\n                return 0.5;\n            case 'right':\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    protected getCursorPosX()\n    {\n        const align = this.getAlign();\n\n        switch (align)\n        {\n            case 0:\n                return this.inputField.x + this.inputField.width;\n            case 0.5:\n                return this.inputField.x + (this.inputField.width * 0.5);\n            case 1:\n                return this.inputField.x;\n            default:\n                return 0;\n        }\n    }\n\n    /** Sets the input text. */\n    set value(text: string)\n    {\n        this.inputField.text = text;\n\n        if (text.length !== 0)\n        {\n            this.placeholder.visible = false;\n        }\n        else\n        {\n            this.placeholder.visible = !this.editing;\n        }\n\n        this.align();\n    }\n\n    /** Return text of the input. */\n    get value(): string\n    {\n        return this.inputField.text;\n    }\n\n    /**\n     * Set paddings\n     * @param value - number, array of 4 numbers or object with keys: top, right, bottom, left\n     * or: [top, right, bottom, left]\n     * or: [top&bottom, right&left]\n     * or: {\n     *  left: 10,\n     *  right: 10,\n     *  top: 10,\n     *  bottom: 10,\n     * }\n     */\n    set padding(value: Padding)\n    {\n        if (typeof value === 'number')\n        {\n            this.paddingTop = value;\n            this.paddingRight = value;\n            this.paddingBottom = value;\n            this.paddingLeft = value;\n        }\n\n        if (Array.isArray(value))\n        {\n            this.paddingTop = value[0] ?? 0;\n            this.paddingRight = value[1] ?? value[0] ?? 0;\n            this.paddingBottom = value[2] ?? value[0] ?? 0;\n            this.paddingLeft = value[3] ?? value[1] ?? value[0] ?? 0;\n        }\n        else if (typeof value === 'object')\n        {\n            this.paddingTop = value.top ?? 0;\n            this.paddingRight = value.right ?? 0;\n            this.paddingBottom = value.bottom ?? 0;\n            this.paddingLeft = value.left ?? 0;\n        }\n    }\n\n    // Return array of paddings [top, right, bottom, left]\n    get padding(): [number, number, number, number]\n    {\n        return [this.paddingTop, this.paddingRight, this.paddingBottom, this.paddingLeft];\n    }\n}\n","import { Container } from '@pixi/display';\n\nexport type ListType = 'horizontal' | 'vertical';\n\nexport type ListOptions = {\n    elementsMargin?: number;\n    children?: Container[];\n    vertPadding?: number;\n    horPadding?: number;\n};\n\n/**\n * Container-based component for arranging Pixi containers one after another based on their sizes.\n *\n * Type option is used to set the direction of the arrangement.\n *\n * If type is not specified, it will be acting like a bidirectional, items will be arranged to fit horizontally,\n * after there is no space left, new line will be started, so items will be arranged like `inline-block` in css.\n *\n * It is used inside elements with repeatable content, like {@link Select} or {@link ScrollBox}.\n * @example\n * const list = new List({\n *    children: [\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50),\n        new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, 50, 50),\n *    ],\n * });\n *\n * list.addChild(new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50));\n */\nexport class List extends Container\n{\n    protected options?: { type?: ListType } & ListOptions;\n\n    /** Container, that holds all inner elements. */\n    view: Container;\n\n    /** Arrange direction. */\n    protected _type: ListType;\n\n    /** Returns all arranged elements. */\n    override readonly children: Container[] = [];\n\n    constructor(options?: { type?: ListType } & ListOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.on('added', () => this.arrangeChildren());\n        this.on('childAdded', () => this.arrangeChildren());\n    }\n\n    /**\n     * Initiates list component.\n     * @param options\n     */\n    init(options?: { type?: ListType } & ListOptions)\n    {\n        this.options = options;\n\n        if (options?.type)\n        {\n            this.type = options.type;\n        }\n\n        if (options?.children)\n        {\n            options.children.forEach((child) => this.addChild(child));\n        }\n    }\n\n    /**\n     * Set items arrange direction.\n     * @param type - Arrange direction.\n     */\n    set type(type: ListType)\n    {\n        this._type = type;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get items arrange direction.\n     * @returns Arrange direction.\n     */\n    get type(): ListType\n    {\n        return this._type;\n    }\n\n    /**\n     * Set element margin.\n     * @param margin - Margin between elements.\n     */\n    set elementsMargin(margin: number)\n    {\n        this.options.elementsMargin = margin;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get element margin.\n     * @returns Margin between elements.\n     */\n    get elementsMargin(): number\n    {\n        return this.options.elementsMargin;\n    }\n\n    /**\n     * Set vertical padding.\n     * @param padding - Vertical padding between list border and its elements.\n     */\n    set vertPadding(padding: number)\n    {\n        this.options.vertPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get vertical padding.\n     * @returns Vertical padding between list border and its elements.\n     */\n    get vertPadding(): number\n    {\n        return this.options.vertPadding;\n    }\n\n    /**\n     * Set horizontal padding.\n     * @param padding - Horizontal padding between list border and its elements.\n     */\n    set horPadding(padding: number)\n    {\n        this.options.horPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get horizontal padding.\n     * @returns Horizontal padding between list border and its elements.\n     */\n    get horPadding(): number\n    {\n        return this.options.horPadding;\n    }\n\n    protected arrangeChildren()\n    {\n        let x = this.options?.horPadding ?? 0;\n        let y = this.options?.vertPadding ?? 0;\n\n        const elementsMargin = this.options?.elementsMargin ?? 0;\n        let maxWidth = this.parent?.width;\n\n        if (this.options?.horPadding)\n        {\n            maxWidth -= this.options.horPadding;\n        }\n\n        this.children.forEach((child, id) =>\n        {\n            switch (this.type)\n            {\n                case 'vertical':\n                    child.y = y;\n                    child.x = x;\n\n                    y += elementsMargin + child.height;\n                    break;\n\n                case 'horizontal':\n                    child.x = x;\n                    child.y = y;\n\n                    x += elementsMargin + child.width;\n                    break;\n\n                default: // bidirectional\n                    child.x = x;\n                    child.y = y;\n\n                    if (child.x + child.width >= maxWidth && id > 0)\n                    {\n                        y += elementsMargin + child.height;\n                        x = this.options?.horPadding ?? 0;\n\n                        child.x = x;\n                        child.y = y;\n                    }\n\n                    x += elementsMargin + child.width;\n                    break;\n            }\n        });\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\n\nexport type MaskedFrameOptions = {\n    target?: string | Container;\n    mask?: string | Graphics;\n    borderWidth?: number;\n    borderColor?: number;\n};\n\n/**\n * Draws a border or apply a mask of any shape to a container.\n * @example\n * new MaskedFrame({\n *     target: `avatar.png`,\n *     mask: `avatar_mask.png`,\n *     borderWidth: 5,\n *     borderColor: 0xFFFFFF,\n * });\n */\nexport class MaskedFrame extends Graphics\n{\n    /** Target container. */\n    target: Container;\n\n    protected _targetMask: Container;\n    protected maskData: string | Graphics;\n    protected borderWidth: number;\n    protected borderColor: number;\n\n    constructor(options?: MaskedFrameOptions)\n    {\n        super();\n\n        if (options?.target)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initializes a component.\n     * @param root0\n     * @param root0.target - Container to apply a mask or a border.\n     * @param root0.mask - Mask.\n     * @param root0.borderWidth - Border width.\n     * @param root0.borderColor - Border color.\n     */\n    init({ target, mask, borderWidth, borderColor }: MaskedFrameOptions)\n    {\n        if (this.target)\n        {\n            this.removeChild(this.target);\n        }\n\n        this.target = getView(target);\n        this.addChild(this.target);\n\n        if (mask) this.setMask(mask);\n        if (borderWidth) this.setBorder(borderWidth, borderColor);\n    }\n\n    /**\n     * Applies a mask to a target container.\n     * @param mask\n     */\n    setMask(mask: string | Graphics)\n    {\n        this.maskData = mask;\n\n        this._targetMask = getView(mask);\n        this.target.addChild(this._targetMask);\n        this.target.mask = this._targetMask;\n    }\n\n    /**\n     * Shows a border around the target Container, same shape as the mask.\n     * @param borderWidth\n     * @param borderColor\n     */\n    setBorder(borderWidth: number, borderColor: number)\n    {\n        this.borderWidth = borderWidth;\n        this.borderColor = borderColor;\n\n        this.showBorder();\n\n        const borderMask = typeof this.maskData === 'string' ? Sprite.from(this.maskData) : this.maskData.clone();\n\n        borderMask.width += borderWidth * 2;\n        borderMask.height += borderWidth * 2;\n\n        this.mask = borderMask;\n        this.addChild(borderMask);\n    }\n\n    /** Hides a border. */\n    showBorder()\n    {\n        const width = this.borderWidth * 2;\n\n        this.clear()\n            .beginFill(this.borderColor)\n            .drawRect(0, 0, this.target.width + width, this.target.height + width);\n\n        this.target.x = this.borderWidth;\n        this.target.y = this.borderWidth;\n    }\n\n    /** Hides a border. */\n    hideBorder()\n    {\n        this.clear();\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { CheckBox } from './CheckBox';\nimport { List, ListType } from './List';\n\nexport type RadioBoxOptions = {\n    items: CheckBox[];\n    type: ListType;\n    elementsMargin: number;\n    selectedItem?: number;\n};\n\n/**\n * Creates a container-based controlling wrapper for checkbox elements,\n * for them top behave as radio buttons.\n *\n * Only one checkbox/radio button can be selected at a time.\n *\n * List of items is passed as an array of {@link CheckBox} objects.\n * @example\n * new RadioGroup({\n *     items: [\n *          new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *         new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *          new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *     ],\n *     type: 'vertical'\n * });\n */\nexport class RadioGroup extends Container\n{\n    protected items: CheckBox[] = [];\n\n    /** {@link List}, that holds and control all inned checkboxes.  */\n    innerView: List;\n\n    /** Text value of the selected item. */\n    value: string;\n\n    /** ID of the selected item. */\n    selected: number;\n\n    /** Fires, when new item is selected. */\n    onChange: Signal<(selectedItemID: number, selectedVal: string) => void>;\n\n    protected options: RadioBoxOptions;\n\n    constructor(options?: RadioBoxOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.onChange = new Signal();\n    }\n\n    /**\n     * Initiates a group.\n     * @param options\n     */\n    init(options: RadioBoxOptions)\n    {\n        this.options = options;\n\n        this.value = options.items[options.selectedItem || 0].label.text;\n\n        this.selected = options.selectedItem ?? 0; // first item by default\n\n        if (this.innerView)\n        {\n            this.innerView.type = options.type;\n            this.innerView.elementsMargin = options.elementsMargin;\n        }\n        else\n        {\n            this.innerView = new List({\n                type: options.type,\n                elementsMargin: options.elementsMargin\n            });\n        }\n\n        this.addItems(options.items);\n\n        this.addChild(this.innerView);\n\n        this.selectItem(this.selected);\n    }\n\n    /**\n     * Add items to a group.\n     * @param {CheckBox[]} items - array of {@link CheckBox} instances.\n     */\n    addItems(items: CheckBox[])\n    {\n        items.forEach((checkBox, id) =>\n        {\n            checkBox.onChange.connect(() => this.selectItem(id));\n\n            this.items.push(checkBox);\n\n            this.innerView.addChild(checkBox);\n        });\n    }\n\n    /**\n     * Remove items from a group.\n     * @param ids\n     */\n    removeItems(ids: number[])\n    {\n        ids.forEach((id) =>\n        {\n            const item = this.items[id];\n\n            if (!item) return;\n\n            item.onChange.disconnectAll();\n\n            this.innerView.removeChild(item);\n\n            this.items.splice(id, 1);\n        });\n    }\n\n    /**\n     * Select item by ID.\n     * @param id\n     */\n    selectItem(id: number)\n    {\n        this.items.forEach((item, key) =>\n        {\n            item.forceCheck(key === id);\n        });\n\n        if (this.selected !== id)\n        {\n            this.onChange.emit(id, this.items[id].label.text);\n        }\n\n        this.value = this.options.items[id].label.text;\n        this.selected = id;\n    }\n}\n","export interface SpringOptions\n{\n    max?: number;\n    damp?: number;\n    springiness?: number;\n}\n\nexport class Spring\n{\n    x: number;\n    ax: number;\n    dx: number;\n    tx: number;\n\n    protected _options: SpringOptions;\n\n    constructor(options: SpringOptions = {})\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n\n        // add opts to object for shared opts.\n        this._options = options;\n        this._options.max = options.max || 160;\n        this._options.damp = options.damp || 0.8;\n        this._options.springiness = options.springiness || 0.1;\n    }\n\n    update(): void\n    {\n        this.ax = (this.tx - this.x) * this._options.springiness;\n\n        this.dx += this.ax;\n        this.dx *= this._options.damp;\n\n        if (this.dx < -this._options.max) this.dx = -this._options.max;\n        else if (this.dx > this._options.max) this.dx = this._options.max;\n\n        this.x += this.dx;\n    }\n\n    reset(): void\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n    }\n\n    get max(): number\n    {\n        return this._options.max;\n    }\n\n    set max(value: number)\n    {\n        this._options.max = value;\n    }\n\n    get damp(): number\n    {\n        return this._options.damp;\n    }\n\n    set damp(value: number)\n    {\n        this._options.damp = value;\n    }\n\n    get springiness(): number\n    {\n        return this._options.springiness;\n    }\n\n    set springiness(value: number)\n    {\n        this._options.springiness = value;\n    }\n}\n","import { Spring } from './Spring';\n\nexport default class ScrollSpring\n{\n    done: boolean;\n    to: number;\n\n    protected _spring: Spring;\n    protected _pos: number;\n    protected _speed: number;\n    protected _correctSpeed: boolean;\n\n    constructor()\n    {\n        this._spring = new Spring();\n        this._pos = 0;\n        this.to = 0;\n    }\n\n    start(speed: number, pos: number, to: number): void\n    {\n        this._speed = speed;\n        this._pos = pos;\n        this.to = to;\n        this.done = false;\n\n        this._spring.x = this._pos;\n        this._spring.tx = this.to;\n\n        const diff = this.to - this._pos;\n        const toDirection = Math.abs(diff) / diff;\n        const currentDirection = Math.abs(this._speed) / this._speed;\n\n        if (toDirection !== currentDirection)\n        {\n            this._correctSpeed = true;\n        }\n        else\n        {\n            this._correctSpeed = false;\n        }\n    }\n\n    update(): number\n    {\n        if (this._correctSpeed)\n        {\n            this._speed *= 0.6;\n\n            if (Math.abs(this._speed) < 2)\n            {\n                this._correctSpeed = false;\n            }\n\n            this._pos += this._speed;\n\n            this._spring.x = this._pos;\n        }\n        else\n        {\n            const diff = this.to - this._pos;\n\n            if (Math.abs(diff) < 0.05)\n            {\n                this._pos = this.to;\n                this.done = true;\n            }\n            else\n            {\n                this._spring.tx = this.to;\n                this._spring.update();\n                this._pos = this._spring.x;\n            }\n        }\n\n        return this._pos;\n    }\n\n    cancel(): void\n    {\n    // matches jux interface\n    }\n}\n","import ScrollSpring from './ScrollSpring';\n\nexport interface SlidingNumberOptions\n{\n    constrain?: boolean;\n    maxSpeed?: number;\n    ease?: ConstrainEase;\n}\n\nexport interface ConstrainEase\n{\n    done: boolean;\n    to: number;\n    start(speed: number, pos: number, to: number): void;\n    update(): number;\n}\n\nexport class SlidingNumber\n{\n    position = 0;\n    constrain = true;\n    min = 0; // the window width of the drag\n    max = 0; // the window width of the drag\n    maxSpeed = 400;\n\n    protected _ease: ConstrainEase;\n\n    protected _offset = 0;\n    protected _prev = 0;\n    protected _speed = 0;\n    protected _hasStopped: boolean;\n\n    protected _targetSpeed = 0;\n    protected _speedChecker = 0;\n    protected _grab = 0;\n    protected _activeEase: ConstrainEase;\n\n    constructor(options: SlidingNumberOptions = {})\n    {\n        this.constrain = options.constrain ?? true;\n        this.maxSpeed = options.maxSpeed ?? 400;\n        this._ease = options.ease ?? new ScrollSpring();\n    }\n\n    set value(n: number)\n    {\n        this._speed = 0;\n        this.position = n;\n    }\n\n    get value(): number\n    {\n        return this.position;\n    }\n\n    grab(offset: number): void\n    {\n        this._grab = offset;\n        this._offset = this.position - offset;\n        this._speedChecker = 0;\n        this._targetSpeed = this._speed = 0;\n        this._hasStopped = false;\n    }\n\n    hold(newPosition: number): void\n    {\n        this._speedChecker++;\n\n        this.position = newPosition + this._offset;\n\n        if (this._speedChecker > 1)\n        {\n            this._targetSpeed = this.position - this._prev;\n        }\n\n        this._speed += (this._targetSpeed - this._speed) / 2;\n\n        if (this._speed > this.maxSpeed) this._speed = this.maxSpeed;\n        else if (this._speed < -this.maxSpeed) this._speed = -this.maxSpeed;\n\n        this._prev = this.position;\n\n        if (this.constrain)\n        {\n            this._activeEase = null;\n\n            if (this.position > this.min)\n            {\n                this.position -= (this.position - this.min) / 1.5;\n            }\n            else if (this.position < this.max)\n            {\n                this.position += (this.max - this.position) / 1.5;\n            }\n        }\n    }\n\n    slide(): void\n    {\n        if (this._hasStopped) return;\n\n        if (this.constrain)\n        {\n            this._updateConstrain();\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n\n    get moveAmount(): number\n    {\n        return -(this.position - this._offset - this._grab);\n    }\n\n    protected _updateDefault(): void\n    {\n        this._speed *= 0.9;\n        this.position += this._speed;\n\n        if ((this._speed < 0 ? this._speed * -1 : this._speed) < 0.01)\n        {\n            this._hasStopped = true;\n        }\n    }\n\n    protected _updateConstrain(): void\n    {\n        const max: number = this.max;\n\n        if (this.position > this.min || this.position < max || this._activeEase)\n        {\n            if (!this._activeEase)\n            {\n                this._activeEase = this._ease;\n\n                if (this.position > this.min)\n                {\n                    this._activeEase.start(this._speed, this.position, this.min);\n                }\n                else\n                {\n                    this._activeEase.start(this._speed, this.position, max);\n                }\n            }\n\n            this.position = this._activeEase.update();\n\n            if (this._activeEase.done)\n            {\n                this.position = this._activeEase.to;\n                this._speed = 0;\n                this._activeEase = null;\n            }\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n}\n","import { Point, Rectangle } from '@pixi/core';\nimport { ConstrainEase, SlidingNumber } from './SlidingNumber';\n\ninterface TrackpadOptions\n{\n    /** override the easing function when constraining */\n    xEase?: ConstrainEase;\n    yEase?: ConstrainEase;\n\n    maxSpeed?: number;\n    constrain?: boolean;\n}\n\n/** Easing controller for the {@link ScrollBox}. */\nexport class Trackpad\n{\n    xAxis: SlidingNumber;\n    yAxis: SlidingNumber;\n\n    protected _isDown: boolean;\n    protected _globalPosition: Point;\n    protected _frame: Rectangle;\n    protected _bounds: Rectangle;\n    protected _dirty: boolean;\n\n    constructor(options: TrackpadOptions)\n    {\n        this.xAxis = new SlidingNumber({\n            ease: options.xEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain\n        });\n\n        this.yAxis = new SlidingNumber({\n            ease: options.yEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain\n        });\n\n        this._frame = new Rectangle();\n\n        this._bounds = new Rectangle();\n        this._globalPosition = new Point();\n    }\n\n    pointerDown(pos: Point): void\n    {\n        this.xAxis.grab(pos.x);\n        this.yAxis.grab(pos.y);\n        this._isDown = true;\n    }\n\n    pointerUp(): void\n    {\n        this._isDown = false;\n    }\n\n    pointerMove(pos: Point): void\n    {\n        this._globalPosition = pos;\n    }\n\n    update(): void\n    {\n        if (this._dirty)\n        {\n            this._dirty = false;\n\n            this.xAxis.min = this._bounds.left;\n            this.xAxis.min = this._bounds.right - this._frame.width;\n\n            this.xAxis.min = this._bounds.top;\n            this.xAxis.min = this._bounds.bottom - this._frame.height;\n        }\n\n        if (this._isDown)\n        {\n            this.xAxis.hold(this._globalPosition.x);\n            this.yAxis.hold(this._globalPosition.y);\n        }\n        else\n        {\n            this.xAxis.slide();\n            this.yAxis.slide();\n        }\n    }\n\n    resize(w: number, h: number): void\n    {\n        this._frame.x = 0;\n        this._frame.width = w;\n\n        this._frame.y = 0;\n        this._frame.height = h;\n\n        this._dirty = true;\n    }\n\n    setBounds(minX: number, maxX: number, minY: number, maxY: number): void\n    {\n        this._bounds.x = minX;\n        this._bounds.width = maxX - minX;\n        this._bounds.y = minY;\n        this._bounds.height = maxY - minY;\n\n        this._dirty = true;\n    }\n\n    get x(): number\n    {\n        return this.xAxis.value;\n    }\n\n    get y(): number\n    {\n        return this.yAxis.value;\n    }\n}\n","import { Ticker } from '@pixi/core';\nimport { Container, DisplayObject } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport type { ListType } from './List';\nimport { List } from './List';\nimport ScrollSpring from './utils/trackpad/ScrollSpring';\nimport { Trackpad } from './utils/trackpad/Trackpad';\n\nexport type ScrollBoxOptions = {\n    type?: ListType;\n    background?: number | string;\n    width?: number;\n    height?: number;\n    radius?: number;\n    elementsMargin?: number;\n    items?: Container[];\n    disableDynamicRendering?: boolean;\n    vertPadding?: number;\n    horPadding?: number;\n    padding?: number;\n};\n\n/**\n * Scrollable view, for arranging lists of Pixi container-based elements.\n *\n * Items, that are out of the visible area, are not rendered.\n * @example\n * new ScrollBox({\n *     background: 0XFFFFFF,\n *     items: [\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *     ],\n * });\n */\n\nexport class ScrollBox extends Container\n{\n    protected background: Graphics | Sprite;\n    protected borderMask: Graphics;\n    protected lastWidth: number;\n    protected lastHeight: number;\n    protected __width = 0;\n    protected __height = 0;\n\n    protected readonly onMouseScrollBinded: (event: any) => void;\n\n    protected list: List;\n\n    protected readonly freeSlot = {\n        x: 0,\n        y: 0,\n    };\n\n    protected _trackpad: Trackpad;\n    protected isDragging = 0;\n    protected interactiveStorage: Map<number, DisplayObject> = new Map();\n    protected ticker = Ticker.shared;\n    protected options: ScrollBoxOptions;\n\n    constructor(options?: ScrollBoxOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.ticker.add(this.update, this);\n\n        this.onMouseScrollBinded = this.onMouseScroll.bind(this);\n    }\n\n    /**\n     * Initiates ScrollBox.\n     * @param options\n     */\n    init(options: ScrollBoxOptions)\n    {\n        this.options = options;\n        this.setBackground(options.background);\n\n        this.__width = options.width | this.background.width;\n        this.__height = options.height | this.background.height;\n\n        options.vertPadding = options.vertPadding ?? options.padding ?? 0;\n        options.horPadding = options.horPadding ?? options.padding ?? 0;\n\n        if (!this.list)\n        {\n            this.list = new List();\n\n            super.addChild(this.list);\n        }\n\n        this.list.init({\n            type: options.type,\n            elementsMargin: options.elementsMargin,\n            vertPadding: options.vertPadding,\n            horPadding: options.horPadding,\n        });\n\n        this.addItems(options.items);\n\n        if (this.hasBounds)\n        {\n            this.addMask();\n            this.makeScrollable();\n        }\n\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n\n        this.resize();\n    }\n\n    protected get hasBounds(): boolean\n    {\n        return !!this.__width || !!this.__height;\n    }\n\n    protected override onChildrenChange()\n    {\n        // do nothing we manage this in addItem\n    }\n\n    /**\n     * Add an items to a scrollable list.\n     * @param {...any} items\n     */\n    addItems(items: Container[])\n    {\n        if (!items?.length) return;\n\n        items.forEach((item) => this.addItem(item));\n    }\n\n    /** Remove all items from a scrollable list. */\n    removeItems()\n    {\n        this.list.removeChildren();\n    }\n\n    /**\n     * Adds an item to a scrollable list.\n     * @param {...any} items\n     */\n    addItem<T extends Container[]>(...items: T): T[0]\n    {\n        if (items.length > 1)\n        {\n            items.forEach((item) => this.addItem(item));\n        }\n        else\n        {\n            const child = items[0];\n\n            if (!child.width || !child.height)\n            {\n                console.error('ScrollBox item should have size');\n            }\n\n            child.x = this.freeSlot.x;\n            child.y = this.freeSlot.y;\n\n            this.list.addChild(child);\n\n            if (!this.options.disableDynamicRendering)\n            {\n                child.renderable = this.isItemVisible(child);\n            }\n\n            const elementsMargin = this.options?.elementsMargin ?? 0;\n\n            switch (this.options.type)\n            {\n                case 'horizontal':\n                    this.freeSlot.x += elementsMargin + child.width;\n                    break;\n\n                default:\n                    this.freeSlot.y += elementsMargin + child.height;\n                    break;\n            }\n        }\n\n        this.resize();\n\n        return items[0];\n    }\n\n    /**\n     * Removes an item from a scrollable list.\n     * @param itemID\n     */\n    removeItem(itemID: number)\n    {\n        const child = this.list.children[itemID];\n\n        if (!child)\n        {\n            return;\n        }\n\n        this.list.removeChild(child);\n\n        this.resize();\n    }\n\n    /**\n     * Checks if the item is visible or scrolled out of the visible part of the view.* Adds an item to a scrollable list.\n     * @param item\n     */\n    isItemVisible(item: Container): boolean\n    {\n        const isVertical = this.options.type === 'vertical' || !this.options.type;\n        let isVisible = false;\n        const list = this.list;\n\n        if (isVertical)\n        {\n            const posY = item.y + list.y;\n\n            if (\n                posY + item.height + this.options.vertPadding >= 0\n                && posY - this.options.vertPadding - this.options.elementsMargin <= this.options.height\n            )\n            {\n                isVisible = true;\n            }\n        }\n        else\n        {\n            const posX = item.x + list.x;\n\n            if (posX + item.width >= 0 && posX <= this.options.width)\n            {\n                isVisible = true;\n            }\n        }\n\n        return isVisible;\n    }\n\n    /** Returns all inner items in a list. */\n    get items(): Container[] | []\n    {\n        return this.list?.children ?? [];\n    }\n\n    /**\n     * Set ScrollBox background.\n     * @param {number | string} background - background color or texture.\n     */\n    setBackground(background?: number | string)\n    {\n        if (this.background)\n        {\n            this.removeChild(this.background);\n            if (this.background instanceof Sprite)\n            {\n                this.background.destroy();\n            }\n        }\n\n        this.options.background = background;\n\n        this.background = (background !== undefined && typeof background === 'string')\n            ? Sprite.from(background)\n            : new Graphics();\n\n        this.addChildAt(this.background, 0);\n\n        this.resize();\n    }\n\n    protected addMask()\n    {\n        if (!this.borderMask)\n        {\n            this.borderMask = new Graphics();\n            super.addChild(this.borderMask);\n            this.mask = this.borderMask;\n        }\n\n        this.resize();\n    }\n\n    protected makeScrollable()\n    {\n        if (!this._trackpad)\n        {\n            this._trackpad = new Trackpad({\n                constrain: true,\n                yEase: new ScrollSpring(),\n            });\n        }\n\n        this.on('pointerdown', (e: FederatedPointerEvent) =>\n        {\n            this.isDragging = 1;\n            this._trackpad.pointerDown(e.global);\n        });\n\n        this.on('pointerup', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreInteractivity();\n        });\n\n        this.on('pointerupoutside', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreInteractivity();\n        });\n\n        this.on('globalpointermove', (e: FederatedPointerEvent) =>\n        {\n            this._trackpad.pointerMove(e.global);\n\n            if (!this.isDragging) return;\n\n            if (this.interactiveStorage.size === 0)\n            {\n                this.disableInteractivity(this.items);\n            }\n        });\n\n        const { onMouseHover, onMouseOut } = this;\n\n        this.on('mouseover', onMouseHover, this).on('mouseout', onMouseOut, this);\n    }\n\n    // prevent interactivity on all children\n    protected disableInteractivity(items: DisplayObject[])\n    {\n        items.forEach((item, id) =>\n        {\n            this.emitPointerOpOutside(item);\n\n            if (item.interactive)\n            {\n                this.interactiveStorage.set(id, item);\n                item.eventMode = 'auto';\n                item.interactiveChildren = false;\n            }\n        });\n    }\n\n    protected emitPointerOpOutside(item: DisplayObject)\n    {\n        if (item.eventMode !== 'auto')\n        {\n            item.emit('pointerupoutside', null);\n        }\n\n        if (item instanceof Container && item.children)\n        {\n            item.children.forEach((child) => this.emitPointerOpOutside(child));\n        }\n    }\n\n    // restore interactivity on all children that had it\n    protected restoreInteractivity()\n    {\n        this.interactiveStorage.forEach((item, itemID) =>\n        {\n            item.eventMode = 'static';\n            item.interactiveChildren = false;\n            this.interactiveStorage.delete(itemID);\n        });\n    }\n\n    protected setInteractive(interactive: boolean)\n    {\n        this.eventMode = interactive ? 'static' : 'auto';\n    }\n\n    protected get listHeight(): number\n    {\n        return this.list.height + (this.options.vertPadding * 2);\n    }\n\n    protected get listWidth(): number\n    {\n        return this.list.width + (this.options.horPadding * 2);\n    }\n\n    /** Controls item positions and visibility. */\n    resize(): void\n    {\n        if (!this.hasBounds) return;\n\n        this.renderAllItems();\n\n        if (\n            this.borderMask\n            && (this.lastWidth !== this.listWidth\n                || this.lastHeight !== this.listHeight)\n        )\n        {\n            const verPadding = this.options.vertPadding;\n            const horPadding = this.options.horPadding;\n\n            if (!this.options.width)\n            {\n                this.__width += this.listWidth;\n            }\n\n            if (!this.options.height)\n            {\n                this.__height += this.listHeight;\n            }\n\n            this.borderMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRoundedRect(\n                    0,\n                    0,\n                    this.__width,\n                    this.__height,\n                    this.options.radius | 0,\n                );\n            this.borderMask.eventMode = 'none';\n\n            if (this.background instanceof Graphics)\n            {\n                this.background.clear().lineStyle(0);\n\n                const color = this.options.background;\n\n                this.background.beginFill(\n                    color ?? 0x000000,\n                    color ? 1 : 0.0000001, // if color is not set, set alpha to 0 to be able to drag by click on bg\n                );\n\n                this.background.drawRect(\n                    0,\n                    0,\n                    this.__width + horPadding,\n                    this.__height + verPadding,\n                );\n            }\n\n            if (this.options.type === 'horizontal')\n            {\n                this.setInteractive(this.listWidth > this.__width);\n            }\n            else\n            {\n                this.setInteractive(this.listHeight > this.__height);\n            }\n\n            this.lastWidth = this.listWidth;\n            this.lastHeight = this.listHeight;\n        }\n\n        if (this._trackpad)\n        {\n            const maxWidth\n                = this.borderMask.width\n                - this.list.width\n                - (this.options.horPadding * 2);\n\n            const maxHeight\n                = this.borderMask.height\n                - this.list.height\n                - (this.options.vertPadding * 2);\n\n            if (this.options.type === 'vertical')\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n            }\n            else if (this.options.type === 'horizontal')\n            {\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n            else\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    protected onMouseHover()\n    {\n        this.renderAllItems();\n\n        document.addEventListener('mousewheel', this.onMouseScrollBinded);\n        document.addEventListener('DOMMouseScroll', this.onMouseScrollBinded);\n    }\n\n    protected onMouseOut()\n    {\n        this.stopRenderHiddenItems();\n\n        document.removeEventListener('mousewheel', this.onMouseScrollBinded);\n        document.removeEventListener(\n            'DOMMouseScroll',\n            this.onMouseScrollBinded,\n        );\n    }\n\n    protected onMouseScroll(event: any): void\n    {\n        this.renderAllItems();\n\n        if (\n            this.options.type === 'horizontal'\n            && (typeof event.deltaX !== 'undefined'\n                || typeof event.deltaY !== 'undefined')\n        )\n        {\n            const targetPos = event.deltaY\n                ? this.list.x - event.deltaY\n                : this.list.x - event.deltaX;\n\n            if (\n                targetPos < 0\n                && targetPos + this.listWidth + this.options.horPadding\n                    < this.__width\n            )\n            {\n                this._trackpad.xAxis.value = this.__width - this.listWidth;\n            }\n            else if (targetPos > this.options.horPadding)\n            {\n                this._trackpad.xAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.xAxis.value = targetPos;\n            }\n        }\n        else if (typeof event.deltaY !== 'undefined')\n        {\n            const targetPos = this.list.y - event.deltaY;\n\n            if (\n                targetPos < 0\n                && targetPos + this.listHeight + this.options.vertPadding\n                    < this.__height\n            )\n            {\n                this._trackpad.yAxis.value = this.__height - this.listHeight;\n            }\n            else if (targetPos > this.options.vertPadding)\n            {\n                this._trackpad.yAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.yAxis.value = targetPos;\n            }\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    /** Makes it scroll down to the last element. */\n    scrollBottom()\n    {\n        if (!this.interactive)\n        {\n            this.scrollTop();\n        }\n        else\n        {\n            this.scrollTo(this.list.children.length - 1);\n        }\n    }\n\n    /** Makes it scroll up to the first element. */\n    scrollTop()\n    {\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n    }\n\n    protected renderAllItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = true;\n        });\n    }\n\n    protected stopRenderHiddenItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = this.isItemVisible(child);\n        });\n    }\n\n    /**\n     * Scrolls to the element with the given ID.\n     * @param elementID\n     */\n    scrollTo(elementID: number)\n    {\n        if (!this.interactive)\n        {\n            return;\n        }\n\n        const target = this.list.children[elementID];\n\n        if (!target)\n        {\n            return;\n        }\n\n        this._trackpad.xAxis.value\n            = this.options.type === 'horizontal'\n                ? this.__width\n                  - target.x\n                  - target.width\n                  - this.options.horPadding\n                : 0;\n\n        this._trackpad.yAxis.value\n            = !this.options.type || this.options.type === 'vertical'\n                ? this.__height\n                  - target.y\n                  - target.height\n                  - this.options.vertPadding\n                : 0;\n    }\n\n    /** Gets component height. */\n    override get height(): number\n    {\n        return this.__height;\n    }\n\n    /** Gets component width. */\n    override get width(): number\n    {\n        return this.__width;\n    }\n\n    protected update()\n    {\n        if (!this.list) return;\n\n        this._trackpad.update();\n\n        if (this.options.type === 'horizontal')\n        {\n            if (this.list.x !== this._trackpad.x)\n            {\n                this.renderAllItems();\n                this.list.x = this._trackpad.x;\n            }\n            else\n            {\n                this.stopRenderHiddenItems();\n            }\n        }\n        else\n        if (this.list.y !== this._trackpad.y)\n        {\n            this.renderAllItems();\n            this.list.y = this._trackpad.y;\n        }\n        else\n        {\n            this.stopRenderHiddenItems();\n        }\n    }\n\n    /** Destroys the component. */\n    override destroy()\n    {\n        this.ticker.remove(this.update, this);\n\n        this.background.destroy();\n        this.list.destroy();\n\n        super.destroy();\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { FancyButton } from './FancyButton';\nimport { ScrollBox, ScrollBoxOptions } from './ScrollBox';\nimport { getView } from './utils/helpers/view';\n\nconst defaultVisibleItems = 5;\n\ntype Offset = {\n    y: number;\n    x: number;\n};\n\nexport type SelectItemsOptions = {\n    items: string[];\n    backgroundColor: number | string;\n    hoverColor?: number;\n    width?: number;\n    height?: number;\n    textStyle?: Partial<TextStyle>;\n    radius?: number;\n};\n\nexport type SelectOptions = {\n    closedBG: string | Container;\n    openBG: string | Container;\n    textStyle?: Partial<TextStyle>;\n    selected?: number;\n    selectedTextOffset?: { x?: number; y?: number };\n\n    items: SelectItemsOptions;\n\n    scrollBoxOffset?: { x?: number; y?: number };\n    scrollBoxWidth?: number;\n    scrollBoxHeight?: number;\n    scrollBoxRadius?: number;\n\n    visibleItems?: number;\n\n    scrollBox?: ScrollBoxOptions & {\n        offset?: Offset;\n    };\n};\n\n/**\n * Container-based component that gives us a selection dropdown.\n *\n * It is a composition of a {@link Button} and a {@link ScrollBox}.\n * @example\n * new Select({\n *     closedBG: `select_closed.png`,\n *     openBG: `select_open.png`,\n *     textStyle: { fill: 0xffffff, fontSize: 20 },\n *     items: {\n *         items,\n *         backgroundColor: 0x000000,\n *         hoverColor: 0x000000,\n *         width: 200,\n *         height: 50,\n *     },\n *     scrollBox: {\n *         width: 200,\n *         height: 350,\n *         radius: 30,\n *     },\n * });\n */\n\nexport class Select extends Container\n{\n    protected openButton!: FancyButton;\n    protected closeButton!: FancyButton;\n    protected openView!: Container;\n    protected scrollBox: ScrollBox;\n\n    /** Selected value ID. */\n    value: number;\n\n    /** Fires when selected value is changed. */\n    onSelect: Signal<(value: number, text: string) => void>;\n\n    constructor(options?: SelectOptions)\n    {\n        super();\n\n        this.onSelect = new Signal();\n\n        if (options)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initiates Select.\n     * @param root0\n     * @param root0.closedBG\n     * @param root0.textStyle\n     * @param root0.items\n     * @param root0.openBG\n     * @param root0.selected\n     * @param root0.selectedTextOffset\n     * @param root0.scrollBox\n     * @param root0.visibleItems\n     */\n    init({ closedBG, textStyle, items, openBG, selected, selectedTextOffset, scrollBox, visibleItems }: SelectOptions)\n    {\n        if (this.openView && this.openView !== openBG)\n        {\n            this.removeChild(this.openView);\n        }\n\n        // openButton\n        if (!this.openButton)\n        {\n            this.openButton = new FancyButton({\n                defaultView: getView(closedBG),\n                text: new Text(items?.items ? items.items[0] : '', textStyle),\n                textOffset: selectedTextOffset\n            });\n            this.openButton.onPress.connect(() => this.toggle());\n            this.addChild(this.openButton);\n        }\n        else\n        {\n            this.openButton.views = {\n                defaultView: getView(closedBG),\n                text: new Text(items?.items ? items.items[0] : '', textStyle)\n            };\n\n            this.openButton.textOffset = selectedTextOffset;\n        }\n\n        // openView\n        if (this.openView !== openBG)\n        {\n            this.openView = getView(openBG);\n            this.openView.visible = false;\n            this.addChild(this.openView);\n        }\n\n        // closeButton\n        if (!this.closeButton)\n        {\n            this.closeButton = new FancyButton({\n                defaultView: new Graphics()\n                    .beginFill(0x000000, 0.00001)\n                    .drawRect(0, 0, this.openButton.width, this.openButton.height),\n                text: new Text(items?.items ? items.items[0] : '', textStyle),\n                textOffset: selectedTextOffset\n            });\n            this.closeButton.onPress.connect(() => this.toggle());\n            this.openView.addChild(this.closeButton);\n        }\n        else\n        {\n            this.closeButton.views = {\n                defaultView: new Graphics()\n                    .beginFill(0x000000, 0.00001)\n                    .drawRect(0, 0, this.openButton.width, this.openButton.height),\n                text: new Text(items?.items ? items.items[0] : '', textStyle)\n            };\n\n            this.openButton.textOffset = selectedTextOffset;\n        }\n\n        // ScrollBox\n        if (!this.scrollBox)\n        {\n            this.scrollBox = new ScrollBox();\n\n            this.openView.addChild(this.scrollBox);\n        }\n        else\n        {\n            this.scrollBox.removeItems();\n        }\n\n        this.scrollBox.init({\n            type: 'vertical',\n            elementsMargin: 0,\n            width: this.openButton.width,\n            height: this.openButton.height * (visibleItems ?? defaultVisibleItems),\n            radius: 0,\n            padding: 0,\n            ...scrollBox\n        });\n\n        this.scrollBox.y = this.openButton.height;\n\n        if (scrollBox?.offset)\n        {\n            this.scrollBox.x = scrollBox.offset.x ?? 0;\n            this.scrollBox.y += scrollBox.offset.y ?? 0;\n        }\n\n        this.convertItemsToButtons(items).forEach((button, id) =>\n        {\n            const text = button.text;\n\n            if (id === selected)\n            {\n                this.openButton.text = text;\n                this.closeButton.text = text;\n            }\n\n            button.onPress.connect(() =>\n            {\n                this.value = id;\n                this.onSelect.emit(id, text);\n                this.openButton.text = text;\n                this.closeButton.text = text;\n                this.close();\n            });\n\n            this.scrollBox.addItem(button);\n        });\n    }\n\n    /** Toggle the select state (open if closed, closes - id open). */\n    toggle()\n    {\n        this.openView.visible = !this.openView.visible;\n        this.openButton.visible = !this.openButton.visible;\n    }\n\n    /** Show dropdown. */\n    open()\n    {\n        this.openView.visible = true;\n        this.openButton.visible = false;\n    }\n\n    /** Hide dropdown. */\n    close()\n    {\n        this.openView.visible = false;\n        this.openButton.visible = true;\n    }\n\n    protected convertItemsToButtons({\n        items,\n        backgroundColor,\n        hoverColor,\n        width,\n        height,\n        textStyle,\n        radius\n    }: SelectItemsOptions): FancyButton[]\n    {\n        const buttons: FancyButton[] = [];\n\n        items.forEach((item) =>\n        {\n            const defaultView = new Graphics().beginFill(backgroundColor).drawRoundedRect(0, 0, width, height, radius);\n\n            const color = hoverColor ?? backgroundColor;\n            const hoverView = new Graphics().beginFill(color).drawRoundedRect(0, 0, width, height, radius);\n\n            const text = new Text(item, textStyle);\n\n            const button = new FancyButton({ defaultView, hoverView, text });\n\n            buttons.push(button);\n        });\n\n        return buttons;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Signal } from 'typed-signals';\n\nimport type { DragObject } from './utils/HelpTypes';\nimport { BaseSliderOptions, SliderBase } from './SliderBase';\n\nexport type SliderOptions = BaseSliderOptions & {\n    slider: Container | string;\n    value?: number;\n};\n\n/**\n * Creates a slider to select a single value.\n * @example\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     console.log(`Slider changed to ${value}`);\n * });\n */\nexport class Slider extends SliderBase\n{\n    protected options: SliderOptions;\n\n    /** Fires when value is changing, on every move of slider. */\n    onUpdate: Signal<(value: number) => void> = new Signal();\n\n    /** Fires when value changed, only when slider is released. */\n    onChange: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super({\n            bg: options.bg,\n            slider1: options.slider,\n            fill: options.fill ?? '',\n            min: options.min,\n            max: options.max,\n            value1: options.value,\n            valueTextStyle: options.valueTextStyle,\n            showValue: options.showValue,\n            valueTextOffset: options.valueTextOffset,\n            fillOffset: options.fillOffset,\n        });\n\n        this.options = options;\n\n        this.progress = ((options.value ?? this.min) - this.min) / (this.max - this.min) * 100;\n\n        this.value = options.value ?? this.min;\n    }\n\n    /** Return selected value. */\n    get value(): number\n    {\n        return this._value1;\n    }\n\n    /** Set selected value. */\n    set value(value: number)\n    {\n        if (value === this._value1) return;\n\n        if (value < this.min) value = this.min;\n        if (value > this.max) value = this.max;\n\n        this._value1 = value;\n\n        this.updateSlider();\n\n        this.onUpdate?.emit(this.value);\n    }\n\n    /** Set slider instance ot texture. */\n    // eslint-disable-next-line accessor-pairs\n    set slider(value: Container | string)\n    {\n        this.slider1 = value;\n        this.updateSlider();\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        this.progress = this.validate((x / this.bg.width) * 100);\n        this.value = this.min + (((this.max - this.min) / 100) * this.progress);\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value);\n    }\n\n    protected updateSlider()\n    {\n        this._slider1.x = ((this.bg.width - this._slider1.width) / 100) * this.progress;\n\n        if (this.options.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n    }\n}\n"],"names":["ButtonEvents","Signal","view","e","isMobile","_e","Button","wasItInitiated","enabled","ButtonContainer","Mixin","Container","getView","Sprite","Switcher","views","triggerEvents","activeViewID","event","stateView","viewInstance","id","exID","res","cleanup","element","CheckBox","options","text","style","_a","Text","_b","_c","_d","unchecked","checked","uncheckedView","ProgressBar","params","bg","fill","fillOffset","progress","offsetX","offsetY","Graphics","startPoint","endPoint","SliderBase","value","sliderData","slider","container","_event","DoubleSlider","value1","value2","obj","x","slider1Dist","slider2Dist","sliderPosX","sliderPosY","getTextView","fitToView","parent","child","padding","scaleX","scaleY","maxWidth","maxHeight","widthOverflow","heightOverflow","states","FancyButton","defaultView","hoverView","pressedView","disabledView","offset","textOffset","iconOffset","scale","anchor","anchorX","anchorY","icon","animations","ObservablePoint","Ticker","Group","newState","currentView","activeView","state","_f","stateOffset","defaultStateOffset","hover","pressed","disabled","y","width","height","Rectangle","_bth","_g","_h","defaultStateAnimation","stateAnimation","data","Tween","Input","utils","keyboard","maxLength","key","delta","defaultTextStyle","textStyle","TextStyle","Texture","array","dt","align","paddings","_i","_j","_k","_l","List","type","margin","elementsMargin","MaskedFrame","target","mask","borderWidth","borderColor","borderMask","RadioGroup","items","checkBox","ids","item","Spring","ScrollSpring","speed","pos","to","diff","toDirection","currentDirection","SlidingNumber","n","newPosition","max","Trackpad","Point","w","h","minX","maxX","minY","maxY","ScrollBox","itemID","isVertical","isVisible","list","posY","posX","background","onMouseHover","onMouseOut","interactive","verPadding","horPadding","color","targetPos","elementID","m","v","O","g","i","o","V","defaultVisibleItems","Select","closedBG","openBG","selected","selectedTextOffset","scrollBox","visibleItems","__spreadValues","button","backgroundColor","hoverColor","radius","buttons","Slider"],"mappings":"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"}