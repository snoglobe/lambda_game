'use strict';

var display = require('@pixi/display');
var graphics = require('@pixi/graphics');
var sprite = require('@pixi/sprite');
var view = require('./utils/helpers/view.js');

class ProgressBar extends display.Container {
  constructor(params) {
    super();
    this.progressStart = 0;
    this._progress = 0;
    this.innerView = new display.Container();
    this.addChild(this.innerView);
    if (params?.bg && params?.fill) {
      this.init(params);
    }
  }
  /**
   * Initialize ProgressBar.
   * @param root0
   * @param root0.bg - Background texture.
   * @param root0.fill - Fill texture.
   * @param root0.fillOffset - Fill offset.
   * @param root0.progress - Initial progress value.
   */
  init({ bg, fill, fillOffset, progress }) {
    this.setBackground(bg);
    this.setFill(fill, fillOffset);
    this.progress = progress;
  }
  /**
   * Set bg.
   * @param bg
   */
  setBackground(bg) {
    if (this.bg) {
      this.innerView.removeChild(this.bg);
    }
    this.bg = view.getView(bg);
    this.innerView.addChildAt(this.bg, 0);
  }
  /**
   * Set fill.
   * @param fill
   * @param fillOffset
   */
  setFill(fill, fillOffset) {
    if (this.fill) {
      this.innerView.removeChild(this.fill);
      this.fill.destroy();
    }
    if (this.bg instanceof sprite.Sprite && fill === this.bg) {
      fill = sprite.Sprite.from(this.bg.texture);
    }
    this.fill = view.getView(fill);
    this.innerView.addChildAt(this.fill, 1);
    const offsetX = fillOffset?.x ?? 0;
    const offsetY = fillOffset?.y ?? 0;
    this.fill.x = (this.bg.width - this.fill.width) / 2 + offsetX;
    this.fill.y = (this.bg.height - this.fill.height) / 2 + offsetY;
    if (!this.fillMask) {
      this.fillMask = new graphics.Graphics();
    }
    this.fill.addChild(this.fillMask);
    this.fill.mask = this.fillMask;
  }
  validate(progress) {
    progress = Math.round(progress);
    if (progress < 0) {
      return 0;
    }
    if (progress > 100) {
      return 100;
    }
    return progress;
  }
  /** Set current progress percentage value. */
  set progress(progress) {
    this._progress = this.validate(progress);
    if (!this.fill)
      return;
    const startPoint = this.fill.width / 100 * this.progressStart;
    const endPoint = this.fill.width / 100 * this._progress - startPoint;
    if (this.fillMask) {
      this.fillMask.clear().lineStyle(0).beginFill(16777215).drawRect(startPoint, 0, endPoint, this.fill.height);
    }
  }
  /** Return current progress percentage value. */
  get progress() {
    return this._progress;
  }
}

exports.ProgressBar = ProgressBar;
//# sourceMappingURL=ProgressBar.js.map
