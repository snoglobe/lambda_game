'use strict';

var typedSignals = require('typed-signals');
var SliderBase = require('./SliderBase.js');

class Slider extends SliderBase.SliderBase {
  constructor(options) {
    super({
      bg: options.bg,
      slider1: options.slider,
      fill: options.fill ?? "",
      min: options.min,
      max: options.max,
      value1: options.value,
      valueTextStyle: options.valueTextStyle,
      showValue: options.showValue,
      valueTextOffset: options.valueTextOffset,
      fillOffset: options.fillOffset
    });
    /** Fires when value is changing, on every move of slider. */
    this.onUpdate = new typedSignals.Signal();
    /** Fires when value changed, only when slider is released. */
    this.onChange = new typedSignals.Signal();
    this.options = options;
    this.progress = ((options.value ?? this.min) - this.min) / (this.max - this.min) * 100;
    this.value = options.value ?? this.min;
  }
  /** Return selected value. */
  get value() {
    return this._value1;
  }
  /** Set selected value. */
  set value(value) {
    if (value === this._value1)
      return;
    if (value < this.min)
      value = this.min;
    if (value > this.max)
      value = this.max;
    this._value1 = value;
    this.updateSlider();
    this.onUpdate?.emit(this.value);
  }
  /** Set slider instance ot texture. */
  // eslint-disable-next-line accessor-pairs
  set slider(value) {
    this.slider1 = value;
    this.updateSlider();
  }
  update(event) {
    if (!this.dragging)
      return;
    const obj = event.currentTarget;
    const { x } = obj.parent.worldTransform.applyInverse(event.global);
    this.progress = this.validate(x / this.bg.width * 100);
    this.value = this.min + (this.max - this.min) / 100 * this.progress;
  }
  change() {
    this.onChange?.emit(this.value);
  }
  updateSlider() {
    this._slider1.x = (this.bg.width - this._slider1.width) / 100 * this.progress;
    if (this.options.showValue) {
      this.value1Text.text = `${Math.round(this.value)}`;
      const sliderPosX = this._slider1.x + this._slider1.width / 2;
      const sliderPosY = this._slider1.y;
      this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);
      this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);
    }
  }
}

exports.Slider = Slider;
//# sourceMappingURL=Slider.js.map
