import { Container } from '@pixi/display';
import { FederatedPointerEvent } from '@pixi/events';
import { Signal } from 'typed-signals';
import { BaseSliderOptions, SliderBase } from './SliderBase';
export type SliderOptions = BaseSliderOptions & {
    slider: Container | string;
    value?: number;
};
/**
 * Creates a slider to select a single value.
 * @example
 * new Slider({
 *     bg: 'slider_bg.png',
 *     fill: 'slider.png',
 *     slider: 'slider.png',
 *     min: 0,
 *     max: 100,
 *     value: 50,
 * });
 *
 * singleSlider.onChange.connect((value) => {
 *     console.log(`Slider changed to ${value}`);
 * });
 */
export declare class Slider extends SliderBase {
    protected options: SliderOptions;
    /** Fires when value is changing, on every move of slider. */
    onUpdate: Signal<(value: number) => void>;
    /** Fires when value changed, only when slider is released. */
    onChange: Signal<(value: number) => void>;
    constructor(options: SliderOptions);
    /** Return selected value. */
    get value(): number;
    /** Set selected value. */
    set value(value: number);
    /** Set slider instance ot texture. */
    set slider(value: Container | string);
    protected update(event: FederatedPointerEvent): void;
    protected change(): void;
    protected updateSlider(): void;
}
//# sourceMappingURL=Slider.d.ts.map