import { Container } from '@pixi/display';
import { ButtonEvents } from './ButtonEvents.mjs';
import { Mixin } from 'ts-mixer';

class Button extends ButtonEvents {
  /**
   * Turns a given container-based view into a button by adding all button events.
   * @param {Container} view - instance of container, to be turned into button.
   */
  constructor(view) {
    super();
    if (view)
      this.init(view);
  }
  /**
   * Creates and connect interaction events.
   * @param {Container} view - instance of container, to be turned into button
   */
  init(view) {
    this.view = view;
    this.enabled = true;
  }
  /** Set button view, thar all the interaction events are applied to. */
  set view(view) {
    const wasItInitiated = !!this._view;
    if (wasItInitiated)
      this.disconnectEvents(view);
    this._view = view;
    this.connectEvents(view);
    if (!wasItInitiated)
      this.enabled = true;
  }
  /** Get button view, thar all the interaction events are applied to. */
  get view() {
    return this._view;
  }
  /**
   * Switcher, which prevents all button events from firing if off.
   * @param {boolean} enabled
   */
  set enabled(enabled) {
    if (!this.view) {
      console.error("Button view is not set. Please set it before enabling the button.");
      return;
    }
    this.view.eventMode = enabled ? "static" : "auto";
    this.view.cursor = enabled ? "pointer" : "default";
    if (!enabled && this.isDown) {
      this.processUp();
    }
  }
  /** Getter that returns button state. */
  get enabled() {
    return this.view.eventMode === "static";
  }
}
class ButtonContainer extends Mixin(Container, Button) {
  constructor(view) {
    super();
    if (view) {
      this.init(view);
    }
  }
  /**
   * Initialize button.
   * @param {Container} view
   */
  init(view) {
    this.addChild(view);
    this.view = view;
    this.enabled = true;
  }
}

export { Button, ButtonContainer };
//# sourceMappingURL=Button.mjs.map
