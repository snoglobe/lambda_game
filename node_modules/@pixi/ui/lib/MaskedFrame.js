'use strict';

var graphics = require('@pixi/graphics');
var sprite = require('@pixi/sprite');
var view = require('./utils/helpers/view.js');

class MaskedFrame extends graphics.Graphics {
  constructor(options) {
    super();
    if (options?.target) {
      this.init(options);
    }
  }
  /**
   * Initializes a component.
   * @param root0
   * @param root0.target - Container to apply a mask or a border.
   * @param root0.mask - Mask.
   * @param root0.borderWidth - Border width.
   * @param root0.borderColor - Border color.
   */
  init({ target, mask, borderWidth, borderColor }) {
    if (this.target) {
      this.removeChild(this.target);
    }
    this.target = view.getView(target);
    this.addChild(this.target);
    if (mask)
      this.setMask(mask);
    if (borderWidth)
      this.setBorder(borderWidth, borderColor);
  }
  /**
   * Applies a mask to a target container.
   * @param mask
   */
  setMask(mask) {
    this.maskData = mask;
    this._targetMask = view.getView(mask);
    this.target.addChild(this._targetMask);
    this.target.mask = this._targetMask;
  }
  /**
   * Shows a border around the target Container, same shape as the mask.
   * @param borderWidth
   * @param borderColor
   */
  setBorder(borderWidth, borderColor) {
    this.borderWidth = borderWidth;
    this.borderColor = borderColor;
    this.showBorder();
    const borderMask = typeof this.maskData === "string" ? sprite.Sprite.from(this.maskData) : this.maskData.clone();
    borderMask.width += borderWidth * 2;
    borderMask.height += borderWidth * 2;
    this.mask = borderMask;
    this.addChild(borderMask);
  }
  /** Hides a border. */
  showBorder() {
    const width = this.borderWidth * 2;
    this.clear().beginFill(this.borderColor).drawRect(0, 0, this.target.width + width, this.target.height + width);
    this.target.x = this.borderWidth;
    this.target.y = this.borderWidth;
  }
  /** Hides a border. */
  hideBorder() {
    this.clear();
  }
}

exports.MaskedFrame = MaskedFrame;
//# sourceMappingURL=MaskedFrame.js.map
