'use strict';

var text = require('@pixi/text');
var typedSignals = require('typed-signals');
var Switcher = require('./Switcher.js');
var cleanup = require('./utils/helpers/cleanup.js');

class CheckBox extends Switcher.Switcher {
  constructor(options) {
    super();
    this.text = options.text;
    this.style = options.style;
    this.checked = options.checked;
    this.triggerEvents = ["onPress"];
    this.innerView.cursor = "pointer";
    this.onCheck = new typedSignals.Signal();
    this.onChange.connect(() => this.onCheck.emit(this.checked));
  }
  addLabel(text$1, style) {
    if (!text$1)
      return;
    this.label = new text.Text(text$1 ?? "", style ?? this._style?.text);
    this.addChild(this.label);
    this.label.cursor = "pointer";
    this.label.eventMode = "static";
    this.label.on("pointertap", () => this.checked = !this.checked);
  }
  /** Setter, which sets a checkbox text. */
  set text(text) {
    if (!text) {
      cleanup.cleanup(this.label);
      return;
    }
    this.label ? this.label.text = text : this.addLabel(text);
  }
  /** Getter, which returns a checkbox text. */
  get text() {
    return this.label?.text ?? "";
  }
  /** Setter, which sets a checkbox style settings. */
  set style(style) {
    this._style = style;
    const { unchecked, checked } = style;
    this.views = [unchecked, checked];
    const uncheckedView = this.views[0];
    if (this.label) {
      if (style.text)
        this.label.style = style.text;
      this.label.x = uncheckedView.width + 10 + (style.textOffset?.x ?? 0);
      this.label.y = (uncheckedView.height - this.label.height) / 2 + (style.textOffset?.y ?? 0);
    }
  }
  /** Getter, which returns a checkbox style settings. */
  get style() {
    return this._style;
  }
  /** Getter, which returns a checkbox state. */
  get checked() {
    return this.active === 1;
  }
  /** Setter, which sets a checkbox state. */
  set checked(checked) {
    this.switch(checked ? 1 : 0);
  }
  /**
   * Setter, that sets a checkbox state without emitting a signal.
   * @param checked
   */
  forceCheck(checked) {
    this.forceSwitch(checked ? 1 : 0);
  }
}

exports.CheckBox = CheckBox;
//# sourceMappingURL=CheckBox.js.map
