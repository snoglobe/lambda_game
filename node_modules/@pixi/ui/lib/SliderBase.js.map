{"version":3,"file":"SliderBase.js","sources":["../src/SliderBase.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\n\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { ProgressBar } from './ProgressBar';\nimport { getView } from './utils/helpers/view';\n\nexport type BaseSliderOptions = {\n    bg: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\nexport type DoubleSliderOptions = BaseSliderOptions & {\n    slider1?: Container | string;\n    slider2?: Container | string;\n\n    value1?: number;\n    value2?: number;\n};\n\n/** Hepper class, used as a base for single or double slider creation. */\nexport class SliderBase extends ProgressBar\n{\n    protected _slider1: Container;\n    protected _slider2: Container;\n\n    protected value1Text?: Text;\n    protected value2Text?: Text;\n\n    protected _value1: number;\n    protected _value2: number;\n\n    protected dragging = 0;\n\n    /** Minimal value. */\n    min = 0;\n\n    /** Maximal value. */\n    max = 100;\n\n    protected startUpdateValue1!: number;\n    protected startUpdateValue2!: number;\n\n    protected settings: DoubleSliderOptions;\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super();\n\n        this.setBackground(options.bg);\n\n        if (options.fill)\n        {\n            this.setFill(options.fill, options.fillOffset);\n        }\n\n        this.settings = options;\n\n        this.slider1 = options.slider1;\n        this.slider2 = options.slider2;\n\n        this.min = options.min ?? 0;\n        this.max = options.max ?? 100;\n\n        this.activate();\n    }\n\n    /**\n     * Sets Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider1(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider1)\n        {\n            this.slider1.removeAllListeners();\n            this.removeChild(this._slider1);\n            this.slider1.destroy();\n        }\n\n        this._slider1 = this.createSlider(value);\n\n        this._slider1.eventMode = 'static';\n\n        this._slider1\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n\n        if (this.settings.showValue && !this.value1Text)\n        {\n            this.value1Text = new Text('', this.settings.valueTextStyle || { fill: 0xffffff });\n            this.value1Text.anchor.set(0.5);\n            this.addChild(this.value1Text);\n        }\n    }\n\n    /** Get Slider1 instance. */\n    get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider2 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider2(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider2)\n        {\n            this.slider2.removeAllListeners();\n            this.removeChild(this._slider2);\n            this.slider2.destroy();\n        }\n\n        this._slider2 = this.createSlider(value);\n\n        this._slider2.eventMode = 'static';\n\n        this._slider2\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n\n        if (this.settings.showValue && !this.value2Text)\n        {\n            this.value2Text = new Text('', this.settings.valueTextStyle || { fill: 0xffffff });\n            this.value2Text.anchor.set(0.5);\n            this.addChild(this.value2Text);\n        }\n    }\n\n    /** Get Slider2 instance. */\n    get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    override setBackground(bg: Container | string)\n    {\n        if (this.bg)\n        {\n            this.bg.removeAllListeners();\n        }\n\n        super.setBackground(bg);\n\n        this.activate();\n    }\n\n    protected activate()\n    {\n        this.bg.eventMode = 'static';\n        this.bg\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n\n        if (this.fill)\n        {\n            this.fill.eventMode = 'none';\n        }\n\n        if (this.value1Text)\n        {\n            this.value1Text.eventMode = 'none';\n        }\n\n        if (this.value2Text)\n        {\n            this.value2Text.eventMode = 'none';\n        }\n    }\n\n    protected createSlider(sliderData: Container | string): Container\n    {\n        const slider = getView(sliderData);\n\n        slider.x = slider.width / 2;\n\n        const container = new Container();\n\n        container.addChild(slider);\n\n        if (slider instanceof Sprite)\n        {\n            slider.anchor.set(0.5);\n        }\n\n        container.y = this.bg.height / 2;\n\n        this.addChild(container);\n\n        return container;\n    }\n\n    protected startUpdate(event: FederatedPointerEvent)\n    {\n        this.dragging = 1;\n        this.startUpdateValue1 = this._value1;\n        this.startUpdateValue2 = this._value2;\n        this.update(event);\n    }\n\n    protected endUpdate()\n    {\n        if (!this.dragging) return;\n        this.dragging = 0;\n\n        if (this.startUpdateValue1 !== this._value1 || this.startUpdateValue2 !== this._value2)\n        {\n            this.change();\n        }\n\n        this.startUpdateValue1 = null;\n        this.startUpdateValue2 = null;\n    }\n\n    /* Called when dragging started and on every move. */\n    protected update(_event: FederatedPointerEvent)\n    {\n    // override me\n    }\n\n    /** Called when dragging stopped. */\n    protected change()\n    {\n    // override me\n    }\n}\n"],"names":["ProgressBar","Text","getView","Container","Sprite"],"mappings":"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"}