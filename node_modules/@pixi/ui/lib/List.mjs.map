{"version":3,"file":"List.mjs","sources":["../src/List.ts"],"sourcesContent":["import { Container } from '@pixi/display';\n\nexport type ListType = 'horizontal' | 'vertical';\n\nexport type ListOptions = {\n    elementsMargin?: number;\n    children?: Container[];\n    vertPadding?: number;\n    horPadding?: number;\n};\n\n/**\n * Container-based component for arranging Pixi containers one after another based on their sizes.\n *\n * Type option is used to set the direction of the arrangement.\n *\n * If type is not specified, it will be acting like a bidirectional, items will be arranged to fit horizontally,\n * after there is no space left, new line will be started, so items will be arranged like `inline-block` in css.\n *\n * It is used inside elements with repeatable content, like {@link Select} or {@link ScrollBox}.\n * @example\n * const list = new List({\n *    children: [\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50),\n        new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, 50, 50),\n *    ],\n * });\n *\n * list.addChild(new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50));\n */\nexport class List extends Container\n{\n    protected options?: { type?: ListType } & ListOptions;\n\n    /** Container, that holds all inner elements. */\n    view: Container;\n\n    /** Arrange direction. */\n    protected _type: ListType;\n\n    /** Returns all arranged elements. */\n    override readonly children: Container[] = [];\n\n    constructor(options?: { type?: ListType } & ListOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.on('added', () => this.arrangeChildren());\n        this.on('childAdded', () => this.arrangeChildren());\n    }\n\n    /**\n     * Initiates list component.\n     * @param options\n     */\n    init(options?: { type?: ListType } & ListOptions)\n    {\n        this.options = options;\n\n        if (options?.type)\n        {\n            this.type = options.type;\n        }\n\n        if (options?.children)\n        {\n            options.children.forEach((child) => this.addChild(child));\n        }\n    }\n\n    /**\n     * Set items arrange direction.\n     * @param type - Arrange direction.\n     */\n    set type(type: ListType)\n    {\n        this._type = type;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get items arrange direction.\n     * @returns Arrange direction.\n     */\n    get type(): ListType\n    {\n        return this._type;\n    }\n\n    /**\n     * Set element margin.\n     * @param margin - Margin between elements.\n     */\n    set elementsMargin(margin: number)\n    {\n        this.options.elementsMargin = margin;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get element margin.\n     * @returns Margin between elements.\n     */\n    get elementsMargin(): number\n    {\n        return this.options.elementsMargin;\n    }\n\n    /**\n     * Set vertical padding.\n     * @param padding - Vertical padding between list border and its elements.\n     */\n    set vertPadding(padding: number)\n    {\n        this.options.vertPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get vertical padding.\n     * @returns Vertical padding between list border and its elements.\n     */\n    get vertPadding(): number\n    {\n        return this.options.vertPadding;\n    }\n\n    /**\n     * Set horizontal padding.\n     * @param padding - Horizontal padding between list border and its elements.\n     */\n    set horPadding(padding: number)\n    {\n        this.options.horPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get horizontal padding.\n     * @returns Horizontal padding between list border and its elements.\n     */\n    get horPadding(): number\n    {\n        return this.options.horPadding;\n    }\n\n    protected arrangeChildren()\n    {\n        let x = this.options?.horPadding ?? 0;\n        let y = this.options?.vertPadding ?? 0;\n\n        const elementsMargin = this.options?.elementsMargin ?? 0;\n        let maxWidth = this.parent?.width;\n\n        if (this.options?.horPadding)\n        {\n            maxWidth -= this.options.horPadding;\n        }\n\n        this.children.forEach((child, id) =>\n        {\n            switch (this.type)\n            {\n                case 'vertical':\n                    child.y = y;\n                    child.x = x;\n\n                    y += elementsMargin + child.height;\n                    break;\n\n                case 'horizontal':\n                    child.x = x;\n                    child.y = y;\n\n                    x += elementsMargin + child.width;\n                    break;\n\n                default: // bidirectional\n                    child.x = x;\n                    child.y = y;\n\n                    if (child.x + child.width >= maxWidth && id > 0)\n                    {\n                        y += elementsMargin + child.height;\n                        x = this.options?.horPadding ?? 0;\n\n                        child.x = x;\n                        child.y = y;\n                    }\n\n                    x += elementsMargin + child.width;\n                    break;\n            }\n        });\n    }\n}\n"],"names":[],"mappings":"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"}