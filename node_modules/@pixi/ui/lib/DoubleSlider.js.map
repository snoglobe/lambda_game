{"version":3,"file":"DoubleSlider.js","sources":["../src/DoubleSlider.ts"],"sourcesContent":["import { FederatedPointerEvent } from '@pixi/events';\nimport type { DragObject } from './utils/HelpTypes';\nimport { DoubleSliderOptions, SliderBase } from './SliderBase';\nimport { Signal } from 'typed-signals';\nimport { Container } from '@pixi/display';\n\n/**\n * Creates a slider with range selection option.\n * @example\n * const doubleSlider = new DoubleSlider({\n *      bg: 'slider_bg.png',\n *      fill: 'slider_progress.png',\n *      slider1: 'slider.png',\n *      slider2: 'slider.png',\n *  });\n *\n * doubleSlider.onChange.connect((value1, value2) =>\n *     console.log(`New slider range ${value1} - ${value2}`)S\n * );\n */\n\nexport class DoubleSlider extends SliderBase\n{\n    protected options: DoubleSliderOptions;\n\n    protected activeValue: 'value1' | 'value2';\n\n    /** Signal that fires when value have changed. */\n    onChange: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    /** Signal that fires when value is changing. */\n    onUpdate: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super(options);\n\n        this.options = options;\n        this.setInitialState();\n    }\n\n    protected setInitialState()\n    {\n        this.validateValues();\n\n        const { value1, value2 } = this.options;\n\n        this.updateProgress(value1, value2);\n\n        this.value2 = value2;\n        this.value1 = value1;\n    }\n\n    protected updateProgress(value1 = this.value1, value2 = this.value2)\n    {\n        this.progressStart = ((value1 - this.min) / (this.max - this.min)) * 100;\n        this.progress = ((value2 - this.min) / (this.max - this.min)) * 100;\n    }\n\n    protected validateValues()\n    {\n        if (!this.options.value1)\n        {\n            this.options.value1 = this.min;\n        }\n\n        if (!this.options.value2)\n        {\n            this.options.value2 = this.options.max;\n        }\n\n        if (this.options.value2 < this.options.value1)\n        {\n            this.options.value2 = this.options.value1;\n        }\n\n        if (this.options.value1 < this.options.min)\n        {\n            this.options.value1 = this.options.min;\n        }\n\n        if (this.options.value1 > this.options.max)\n        {\n            this.options.value1 = this.options.max;\n        }\n\n        if (this.options.value2 > this.options.max)\n        {\n            this.options.value2 = this.options.max;\n        }\n    }\n\n    /** Returns left value. */\n    get value1(): number\n    {\n        return this._value1;\n    }\n\n    /** Sets left value. */\n    set value1(value1: number)\n    {\n        if (value1 === this._value1) return;\n\n        if (value1 < this.min) value1 = this.min;\n        if (value1 > this._value2) value1 = this._value2;\n\n        this._value1 = value1;\n\n        this.updateSlider1();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    /** Returns right value. */\n    get value2(): number\n    {\n        return this._value2;\n    }\n\n    /** Sets right value. */\n    set value2(value2: number)\n    {\n        if (value2 === this._value2) return;\n\n        if (value2 < this._value1) value2 = this._value1;\n        if (value2 > this.max) value2 = this.max;\n\n        this._value2 = value2;\n\n        this.updateSlider2();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        const slider1Dist = Math.abs(x - this._slider1.x - this._slider1.width);\n        const slider2Dist = Math.abs(x - this._slider2.x);\n\n        if (!this.activeValue)\n        {\n            if (this.slider1 && x < this.slider1.x)\n            {\n                this.activeValue = 'value1';\n            }\n            else if (this.slider2 && x > this.slider2.x)\n            {\n                this.activeValue = 'value2';\n            }\n            else\n            {\n                this.activeValue = slider1Dist < slider2Dist ? 'value1' : 'value2';\n            }\n        }\n\n        const progress = this.validate((x / this.bg.width) * 100);\n\n        if (this.activeValue === 'value1')\n        {\n            this.progressStart = progress;\n            this.value1 = this.min + (((this.max - this.min) / 100) * progress);\n            this.updateProgress(this.value1, this.value2);\n        }\n        else\n        {\n            this.progress = progress;\n            this.value2 = this.min + (((this.max - this.min) / 100) * progress);\n        }\n    }\n\n    protected override endUpdate()\n    {\n        super.endUpdate();\n\n        this.activeValue = null;\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    /**\n     * Set Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider1(value: Container | string)\n    {\n        super.slider1 = value;\n        this.updateSlider1();\n    }\n\n    /** Get Slider1 instance. */\n    override get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider2(value: Container | string)\n    {\n        super.slider2 = value;\n        this.updateSlider2();\n    }\n\n    /** Get Slider2 instance. */\n    override get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    protected updateSlider1()\n    {\n        this._slider1.x = ((this.bg.width - this._slider1.width) / 100) * this.progressStart;\n\n        if (this._slider2 && this._slider1.x > this._slider2.x)\n        {\n            this._slider1.x = this._slider2.x;\n        }\n\n        if (this.options?.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value1)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    protected updateSlider2()\n    {\n        this._slider2.x = ((this.bg.width - this._slider2.width) / 100) * this.progress;\n\n        if (this._slider2.x < this._slider1.x)\n        {\n            this._slider2.x = this._slider1.x;\n        }\n\n        if (this.options?.showValue)\n        {\n            this.value2Text.text = `${Math.round(this.value2)}`;\n\n            const sliderPosX = this._slider2.x + (this._slider2.width / 2);\n            const sliderPosY = this._slider2.y;\n\n            this.value2Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value2Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n    }\n}\n"],"names":["SliderBase","Signal"],"mappings":"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"}