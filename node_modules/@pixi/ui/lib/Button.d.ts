import { Container } from '@pixi/display';
import { ButtonEvents } from './ButtonEvents';
/**
 * Adds button events to a given container-based view
 *
 * so you can subscribe to them and use your container-based instance as a button.
 * @example
 * const container = new Container();
 * const button = new Button(
 *      new Graphics()
 *          .beginFill(0xFFFFFF)
 *          .drawRoundedRect(0, 0, 100, 50, 15)
 * );
 *
 * button.onPress.connect(() => console.log('onPress'));
 *
 * container.addChild(button.view);
 * // or container.addChild(container); which is the same
 */
export declare class Button extends ButtonEvents {
    /** Container, given as a constructor parameter that is a button view. */
    protected _view: Container;
    /**
     * Turns a given container-based view into a button by adding all button events.
     * @param {Container} view - instance of container, to be turned into button.
     */
    constructor(view?: Container);
    /**
     * Creates and connect interaction events.
     * @param {Container} view - instance of container, to be turned into button
     */
    init(view: Container): void;
    /** Set button view, thar all the interaction events are applied to. */
    set view(view: Container);
    /** Get button view, thar all the interaction events are applied to. */
    get view(): Container;
    /**
     * Switcher, which prevents all button events from firing if off.
     * @param {boolean} enabled
     */
    set enabled(enabled: boolean);
    /** Getter that returns button state. */
    get enabled(): boolean;
}
declare const ButtonContainer_base: import("ts-mixer/dist/types/types").Class<any[], Container<import("@pixi/display").DisplayObject> & Button, (new () => Container<import("@pixi/display").DisplayObject>) & typeof Button, false>;
/**
 * Button based on container. You can use it same {@link Button}
 * but without need to pre create a container and interact with it through `.view` accessor.
 * @example
 * const button = new ButtonContainer(
 *      new Graphics()
 *          .beginFill(0xFFFFFF)
 *          .drawRoundedRect(0, 0, 100, 50, 15)
 * );
 *
 * button.onPress.connect(() => console.log('onPress'));
 *
 * container.addChild(button);
 */
export declare class ButtonContainer extends ButtonContainer_base {
    constructor(view?: Container);
    /**
     * Initialize button.
     * @param {Container} view
     */
    init(view: Container): void;
}
export {};
//# sourceMappingURL=Button.d.ts.map