import { Container } from '@pixi/display';
import { TextStyle } from '@pixi/text';
import { Signal } from 'typed-signals';
import { FancyButton } from './FancyButton';
import { ScrollBox, ScrollBoxOptions } from './ScrollBox';
type Offset = {
    y: number;
    x: number;
};
export type SelectItemsOptions = {
    items: string[];
    backgroundColor: number | string;
    hoverColor?: number;
    width?: number;
    height?: number;
    textStyle?: Partial<TextStyle>;
    radius?: number;
};
export type SelectOptions = {
    closedBG: string | Container;
    openBG: string | Container;
    textStyle?: Partial<TextStyle>;
    selected?: number;
    selectedTextOffset?: {
        x?: number;
        y?: number;
    };
    items: SelectItemsOptions;
    scrollBoxOffset?: {
        x?: number;
        y?: number;
    };
    scrollBoxWidth?: number;
    scrollBoxHeight?: number;
    scrollBoxRadius?: number;
    visibleItems?: number;
    scrollBox?: ScrollBoxOptions & {
        offset?: Offset;
    };
};
/**
 * Container-based component that gives us a selection dropdown.
 *
 * It is a composition of a {@link Button} and a {@link ScrollBox}.
 * @example
 * new Select({
 *     closedBG: `select_closed.png`,
 *     openBG: `select_open.png`,
 *     textStyle: { fill: 0xffffff, fontSize: 20 },
 *     items: {
 *         items,
 *         backgroundColor: 0x000000,
 *         hoverColor: 0x000000,
 *         width: 200,
 *         height: 50,
 *     },
 *     scrollBox: {
 *         width: 200,
 *         height: 350,
 *         radius: 30,
 *     },
 * });
 */
export declare class Select extends Container {
    protected openButton: FancyButton;
    protected closeButton: FancyButton;
    protected openView: Container;
    protected scrollBox: ScrollBox;
    /** Selected value ID. */
    value: number;
    /** Fires when selected value is changed. */
    onSelect: Signal<(value: number, text: string) => void>;
    constructor(options?: SelectOptions);
    /**
     * Initiates Select.
     * @param root0
     * @param root0.closedBG
     * @param root0.textStyle
     * @param root0.items
     * @param root0.openBG
     * @param root0.selected
     * @param root0.selectedTextOffset
     * @param root0.scrollBox
     * @param root0.visibleItems
     */
    init({ closedBG, textStyle, items, openBG, selected, selectedTextOffset, scrollBox, visibleItems }: SelectOptions): void;
    /** Toggle the select state (open if closed, closes - id open). */
    toggle(): void;
    /** Show dropdown. */
    open(): void;
    /** Hide dropdown. */
    close(): void;
    protected convertItemsToButtons({ items, backgroundColor, hoverColor, width, height, textStyle, radius }: SelectItemsOptions): FancyButton[];
}
export {};
//# sourceMappingURL=Select.d.ts.map