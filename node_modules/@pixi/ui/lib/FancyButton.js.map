{"version":3,"file":"FancyButton.js","sources":["../src/FancyButton.ts"],"sourcesContent":["import { ObservablePoint, Ticker, Rectangle } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\nimport { AnyText, getTextView, PixiText } from './utils/helpers/text';\nimport { Button } from './Button';\nimport { Signal } from 'typed-signals';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { fitToView } from './utils/helpers/fit';\nimport { Tween, Group } from 'tweedle.js';\n\nconst states = ['default', 'hover', 'pressed', 'disabled'] as const;\n\ntype State = typeof states[number];\ntype Pos = { x?: number; y?: number };\ntype PosList = { [K in State]?: Pos };\n\nexport type Offset = Pos & PosList;\n\ntype Views = {\n    defaultView?: string | Container;\n    hoverView?: string | Container;\n    pressedView?: string | Container;\n    disabledView?: string | Container;\n    text?: AnyText;\n    icon?: string | Container;\n};\n\ntype ButtonViews = {\n    default?: Container;\n    hover?: Container;\n    pressed?: Container;\n    disabled?: Container;\n    text?: PixiText;\n    icon?: Container;\n};\n\ntype AnimationData = {\n    x?: number;\n    y?: number;\n    width?: number;\n    height?: number;\n    scale?: Pos;\n};\ntype Animation = {\n    props: AnimationData;\n    duration?: number;\n};\ntype StateAnimations = {\n    [K in State]?: Animation;\n};\n\nexport type ButtonOptions = Views & {\n    padding?: number;\n    scale?: number;\n    anchor?: number;\n    anchorX?: number;\n    anchorY?: number;\n    offset?: Offset;\n    textOffset?: Offset;\n    iconOffset?: Offset;\n    animations?: StateAnimations;\n};\n\n/**\n * Button component with a lots of tweaks, to create a button fast.\n *\n *  By default text view and icon view are centered in the active view.\n *\n * If views are not the same size, offset property of the constructor\n * can be used to adjust the position of the text, icon and the views.\n * @example\n * const button = new FancyButton({\n *     defaultView: `button.png`,\n *     hoverView: `button_hover.png`,\n *     pressedView: `button_pressed.png`,\n *     text: new Text('Click me!'),\n *     animations: {\n *          hover: {\n *              props: {\n *                  scale: {\n *                      x: 1.1,\n *                      y: 1.1,\n *                  }\n *              },\n *              duration: 100,\n *          },\n *          pressed: {\n *              props: {\n *                  scale: {\n *                      x: 0.9,\n *                      y: 0.9,\n *                  }\n *              },\n *              duration: 100,\n *          }\n *      }\n * });\n *\n * button.onPress.connect(() => console.log('Button pressed!'));\n */\nexport class FancyButton extends Container\n{\n    protected events: Button;\n    protected animations: StateAnimations;\n    protected originalInnerViewState: AnimationData;\n    protected defaultDuration = 100;\n\n    /** Padding of the button text view. If button text does not fit active view + padding it will scale down to fit. */\n    padding: number;\n\n    /** Offset of the button state views. If state views have different sizes, this option can help adjust them. */\n    offset: Offset & Pos;\n\n    /** Offset of the text view. Can be set to any state of the button. */\n    textOffset: Offset;\n\n    /** Offset of the icon view. Can be set to any state of the button. */\n    iconOffset: Offset;\n\n    //* View that holds all button inner views */\n    innerView: Container;\n\n    protected _views: ButtonViews = {};\n\n    /** State of the button. Possible valuers are: 'default', 'hover', 'pressed', 'disabled' */\n    state: State;\n\n    /** Anchor point of the button. */\n    anchor: ObservablePoint;\n\n    /** Event that is fired when the button is down. */\n    onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when a down event happened inside the button\n     * and up event happened inside or outside of the button\n     */\n    onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when mouse up event happens outside of the button\n     * after the down event happened inside the button boundaries.\n     */\n    onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that fired when the mouse is out of the view */\n    onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the button is pressed. */\n    onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the mouse hovers the button. Fired only if device is not mobile.*/\n    onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /**\n     * Turns a given container-based view into a button by adding all button events.\n     * @param {object} options - Button options.\n     * @param {Container} options.defaultView - Container-based view that is shown when non of the button events are active.\n     * @param {Container} options.hoverView - Container-based view that is shown when the mouse hovers over the button.\n     * @param {Container} options.pressedView - Container-based view, shown when the mouse press on the component.\n     * @param {Container} options.disabledView - Container-based view shown when the button is disabled.\n     * @param {Container} options.icon - Container-based view for the button icon.\n     * @param {Text} options.text - Text-based view for the button text.\n     * @param {number} options.padding - Padding of the button text and icon views.\n     * If button text or icon does not fit active view + padding it will scale down to fit.\n     * @param {Point} options.offset - Offset of the button state views.\n     * @param {Point} options.textOffset - Offset of the text view.\n     * @param {Point} options.iconOffset - Offset of the icon view.\n     * @param {number} options.scale - Scale of the button. Scale will be applied to a main container,\n     * when all animations scales will be applied to the inner view.\n     * @param {number} options.anchor - Anchor point of the button.\n     * @param {number} options.anchorX - Horizontal anchor point of the button.\n     * @param {number} options.anchorY - Vertical anchor point of the button.\n     * @param options.animations - Animations that will be played when the button state changes.\n     */\n    constructor({\n        defaultView,\n        hoverView,\n        pressedView,\n        disabledView,\n        text,\n        padding,\n        offset,\n        textOffset,\n        iconOffset,\n        scale,\n        anchor,\n        anchorX,\n        anchorY,\n        icon,\n        animations\n    }: ButtonOptions)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.anchor = new ObservablePoint(this.updateAnchor, this);\n        this.anchor.set(anchorX ?? anchor ?? 0, anchorY ?? anchor ?? 0);\n\n        this.padding = padding ?? 0;\n        this.offset = offset;\n        this.textOffset = textOffset;\n        this.iconOffset = iconOffset;\n        this.scale.set(scale ?? 1);\n\n        if (animations)\n        {\n            this.animations = animations;\n            Ticker.shared.add(() => Group.shared.update());\n        }\n\n        this.views = {\n            defaultView,\n            hoverView,\n            pressedView,\n            disabledView,\n            text,\n            icon\n        };\n\n        this.setState('default');\n\n        this.addEvents();\n    }\n\n    /**\n     * Updates the text of the button and updates its scaling basing on the new size.\n     * @param {string | number} text\n     */\n    set text(text: string | number | null)\n    {\n        if (!text || text === 0)\n        {\n            this.innerView.removeChild(this._views.text);\n            this._views.text = null;\n\n            return;\n        }\n\n        if (!this._views.text)\n        {\n            this.createTextView(text);\n\n            return;\n        }\n\n        this._views.text.text = text.toString();\n    }\n\n    /** Returns the text string of the button text element. */\n    get text(): string | undefined\n    {\n        return this._views.text?.text;\n    }\n\n    /**\n     * Setter, that prevents all button events from firing.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        this.events.enabled = enabled;\n\n        this.setState(enabled ? 'default' : 'disabled');\n    }\n\n    /** Getter that returns button state, that controls if button events are firing. */\n    get enabled(): boolean\n    {\n        return this.events.enabled;\n    }\n\n    /**\n     * Updates button state and shows the according views.\n     *\n     * Updates positions and offsets of the views.\n     *\n     * Plays animations if they are set.\n     * @param {State} newState\n     */\n    setState(newState: State)\n    {\n        if (this.state === newState)\n        {\n            return;\n        }\n\n        const currentView = this.getStateView(this.state);\n        const activeView = this.getStateView(newState);\n\n        if (currentView) currentView.visible = false;\n\n        this.state = newState;\n\n        if (activeView)\n        {\n            this.setOffset(activeView, newState, this.offset);\n            activeView.visible = true;\n        }\n\n        this.updateAnchor();\n\n        this.playAnimations(newState);\n    }\n\n    /**\n     *\n     * Manage button text view.\n     * @param {string | Text} text - can be a string, Text, BitmapText ot HTMLText (Container-based element).\n     */\n    protected createTextView(text: AnyText)\n    {\n        if (!this._views.text)\n        {\n            this._views.text = getTextView(text);\n            this._views.text.anchor.set(0);\n            this.innerView.addChild(this._views.text);\n        }\n\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Manages views offsets if it's set.\n     * @param view\n     * @param state\n     * @param offset\n     */\n    protected setOffset(view: Container, state: State, offset: Offset)\n    {\n        const stateOffset = offset\n            ? offset[state]\n            : {\n                x: 0,\n                y: 0\n            };\n\n        const defaultStateOffset = offset?.default;\n\n        if (stateOffset)\n        {\n            view.x += stateOffset.x ?? 0;\n            view.y += stateOffset.y ?? 0;\n        }\n        else if (defaultStateOffset)\n        {\n            view.x += defaultStateOffset.x ?? 0;\n            view.y += defaultStateOffset.y ?? 0;\n        }\n        else if (offset.x || offset.y)\n        {\n            view.x += offset.x ?? 0;\n            view.y += offset.y ?? 0;\n        }\n    }\n\n    /**\n     * Returns active view for the state.\n     * @param state\n     */\n    protected getStateView(state: State): Container | undefined\n    {\n        const { default: defaultView, hover, pressed, disabled } = this._views;\n\n        switch (state)\n        {\n            case 'hover':\n                return hover ?? defaultView;\n            case 'pressed':\n                return pressed ?? hover ?? defaultView;\n            case 'disabled':\n                return disabled ?? defaultView;\n            case 'default':\n                return defaultView;\n            default:\n                return undefined;\n        }\n    }\n\n    /**\n     * Adjusts text view position and scale.\n     * @param {State} state\n     */\n    protected adjustTextView(state: State)\n    {\n        if (!this.text) return;\n\n        const activeView = this.getStateView(this.state);\n\n        if (activeView)\n        {\n            fitToView(activeView, this._views.text, this.padding);\n\n            this._views.text.x = activeView.x + (activeView.width / 2);\n            this._views.text.y = activeView.y + (activeView.height / 2);\n        }\n\n        this._views.text.anchor.set(0.5);\n\n        this.setOffset(this._views.text, state, this.textOffset);\n    }\n\n    /**\n     * Adjusts icon view position and scale.\n     * @param {State} state\n     */\n    protected adjustIconView(state: State)\n    {\n        if (!this._views.icon)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(state);\n\n        fitToView(activeView, this._views.icon, this.padding);\n\n        (this._views.icon as Sprite).anchor?.set(0);\n\n        this._views.icon.x = activeView.x + (activeView.width / 2) - (this._views.icon.width / 2);\n        this._views.icon.y = activeView.y + (activeView.height / 2) - (this._views.icon.height / 2);\n\n        this.setOffset(this._views.icon, state, this.iconOffset);\n    }\n\n    /**\n     * Reset views positions according to the button anchor setting.\n     * We have to set the anchor position for each view individually, as each of them\n     * can be a different type of view (container without anchor, sprite with anchor, etc)\n     * we have to reset all anchors to 0,0 and then set the positions manually.\n     */\n    protected updateAnchor()\n    {\n        const anchorX = this.anchor.x ?? 0;\n        const anchorY = this.anchor.y ?? 0;\n        const views = [this._views.default, this._views.hover, this._views.pressed, this._views.disabled];\n\n        views.forEach((view) =>\n        {\n            if (!view) return;\n\n            (view as Sprite).anchor?.set(0);\n\n            view.x = -view.width * anchorX;\n            view.y = -view.height * anchorY;\n        });\n\n        if (this._views.default)\n        {\n            const { x, y, width, height } = this._views.default;\n\n            this.hitArea = new Rectangle(x, y, width, height);\n        }\n\n        this.adjustIconView(this.state);\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Set button views according to the config.\n     * If state view is not set (undefined), it will not be changed,\n     * so if it was set before, it will remain the same.\n     * If state view is set to null, it will be removed from the button.\n     * If state view is set it will be updated or added to a button.\n     * @param {Views} views\n     */\n    // eslint-disable-next-line accessor-pairs\n    set views(views: Views)\n    {\n        const { defaultView, hoverView, pressedView, disabledView, text, icon } = views;\n\n        if (defaultView)\n        {\n            this._views.default = getView(defaultView);\n            this.setOffset(this._views.default, 'default', this.offset);\n            if (!this._views.default.parent)\n            {\n                this.innerView.addChild(this._views.default);\n            }\n        }\n        else if (defaultView === null && this._views.default)\n        {\n            this.innerView.removeChild(this._views.default);\n            this._views.default = null;\n        }\n\n        if (hoverView)\n        {\n            this._views.hover = getView(hoverView);\n\n            if (!this._views.hover.parent)\n            {\n                this.innerView.addChild(this._views.hover);\n            }\n\n            this._views.hover.visible = false;\n        }\n        else if (hoverView === null && this._views.hover)\n        {\n            this.innerView.removeChild(this._views.hover);\n            this._views.hover = null;\n        }\n\n        if (pressedView)\n        {\n            this._views.pressed = getView(pressedView);\n\n            if (!this._views.pressed.parent)\n            {\n                this.innerView.addChild(this._views.pressed);\n            }\n\n            this._views.pressed.visible = false;\n        }\n        else if (pressedView === null && this._views.pressed)\n        {\n            this.innerView.removeChild(this._views.pressed);\n            this._views.pressed = null;\n        }\n\n        if (disabledView)\n        {\n            this._views.disabled = getView(disabledView);\n\n            if (!this._views.disabled.parent)\n            {\n                this.innerView.addChild(this._views.disabled);\n            }\n\n            this._views.disabled.visible = false;\n        }\n        else if (disabledView === null && this._views.disabled)\n        {\n            this.innerView.removeChild(this._views.disabled);\n            this._views.disabled = null;\n        }\n\n        if (icon)\n        {\n            this._views.icon = getView(icon);\n\n            if (!this._views.icon.parent)\n            {\n                this.innerView.addChild(this._views.icon);\n            }\n        }\n        else if (icon === null && this._views.icon)\n        {\n            this.innerView.removeChild(this._views.icon);\n            this._views.icon = null;\n        }\n\n        if (text)\n        {\n            this.createTextView(text);\n        }\n        else if (text === null && this._views.text)\n        {\n            this.innerView.removeChild(this._views.text);\n            this._views.text = null;\n        }\n    }\n\n    /** Creates all button events */\n    protected addEvents()\n    {\n        this.events = new Button(this);\n\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onUpOut = new Signal();\n        this.onOut = new Signal();\n        this.onPress = new Signal();\n        this.onHover = new Signal();\n\n        this.events.onDown.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onDown.emit(this, e);\n            this.down();\n            this.setState('pressed');\n        });\n\n        this.events.onUp.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUp.emit(this, e);\n            this.up();\n            this.setState('hover');\n        });\n\n        this.events.onUpOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUpOut.emit(this, e);\n            this.upOut();\n            this.setState('default');\n        });\n\n        this.events.onOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onOut.emit(this, e);\n            this.out();\n\n            if (!this.events.isDown)\n            {\n                this.setState('default');\n            }\n        });\n\n        this.events.onPress.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onPress.emit(this, e);\n            this.press();\n            this.setState('hover');\n        });\n\n        this.events.onHover.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onHover.emit(this, e);\n            this.hover();\n\n            if (!this.events.isDown)\n            {\n                this.setState('hover');\n            }\n        });\n    }\n\n    /**\n     * Starts animation for the current button state if configured.\n     * @param {State} state\n     */\n    protected playAnimations(state: State)\n    {\n        if (!this.animations) return;\n\n        if (state === 'default' && !this.originalInnerViewState)\n        {\n            this.originalInnerViewState = {\n                x: this.innerView.x,\n                y: this.innerView.y,\n                width: this.innerView.width,\n                height: this.innerView.height,\n                scale: {\n                    x: this.innerView.scale.x,\n                    y: this.innerView.scale.y\n                }\n            };\n\n            // first animation state is default, so we don't need to animate it\n            // this part will run only once, during initialization\n            const defaultStateAnimation = this.animations?.default;\n\n            if (defaultStateAnimation)\n            {\n                this.innerView.x = defaultStateAnimation.props.x ?? this.originalInnerViewState.x;\n                this.innerView.y = defaultStateAnimation.props.y ?? this.originalInnerViewState.y;\n                this.innerView.width = defaultStateAnimation.props.width ?? this.originalInnerViewState.width;\n                this.innerView.height = defaultStateAnimation.props.height ?? this.originalInnerViewState.height;\n                this.innerView.scale.x = defaultStateAnimation.props.scale.x ?? this.originalInnerViewState.scale.x;\n                this.innerView.scale.y = defaultStateAnimation.props.scale.y ?? this.originalInnerViewState.scale.y;\n\n                return;\n            }\n        }\n\n        const stateAnimation = this.animations[state] ?? this.animations.default;\n\n        if (stateAnimation)\n        {\n            const data = stateAnimation;\n\n            this.defaultDuration = data.duration;\n\n            new Tween(this.innerView).to(data.props, data.duration).start();\n\n            return;\n        }\n\n        // if there is no animation for the current state, animate the button to the default state\n        new Tween(this.innerView).to(this.originalInnerViewState, this.defaultDuration).start();\n    }\n\n    /**\n     * Method called when the button pressed.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    down(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the button is up.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    up(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the up event happens outside of the button,\n     * after the down event happened inside the button boundaries.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    upOut(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse leaves the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    out(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse press down the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    press(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse hovers the button.\n     * To be overridden.\n     * Fired only if device is not mobile.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    hover(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n}\n"],"names":["Container","ObservablePoint","Ticker","Group","text","getTextView","fitToView","Rectangle","getView","Button","Signal","Tween"],"mappings":"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"}