import { Container } from '@pixi/display';
import { Signal } from 'typed-signals';
import { List } from './List.mjs';

class RadioGroup extends Container {
  constructor(options) {
    super();
    this.items = [];
    if (options) {
      this.init(options);
    }
    this.onChange = new Signal();
  }
  /**
   * Initiates a group.
   * @param options
   */
  init(options) {
    this.options = options;
    this.value = options.items[options.selectedItem || 0].label.text;
    this.selected = options.selectedItem ?? 0;
    if (this.innerView) {
      this.innerView.type = options.type;
      this.innerView.elementsMargin = options.elementsMargin;
    } else {
      this.innerView = new List({
        type: options.type,
        elementsMargin: options.elementsMargin
      });
    }
    this.addItems(options.items);
    this.addChild(this.innerView);
    this.selectItem(this.selected);
  }
  /**
   * Add items to a group.
   * @param {CheckBox[]} items - array of {@link CheckBox} instances.
   */
  addItems(items) {
    items.forEach((checkBox, id) => {
      checkBox.onChange.connect(() => this.selectItem(id));
      this.items.push(checkBox);
      this.innerView.addChild(checkBox);
    });
  }
  /**
   * Remove items from a group.
   * @param ids
   */
  removeItems(ids) {
    ids.forEach((id) => {
      const item = this.items[id];
      if (!item)
        return;
      item.onChange.disconnectAll();
      this.innerView.removeChild(item);
      this.items.splice(id, 1);
    });
  }
  /**
   * Select item by ID.
   * @param id
   */
  selectItem(id) {
    this.items.forEach((item, key) => {
      item.forceCheck(key === id);
    });
    if (this.selected !== id) {
      this.onChange.emit(id, this.items[id].label.text);
    }
    this.value = this.options.items[id].label.text;
    this.selected = id;
  }
}

export { RadioGroup };
//# sourceMappingURL=RadioGroup.mjs.map
