import { Container } from '@pixi/display';
import { Graphics } from '@pixi/graphics';
import { Sprite } from '@pixi/sprite';
import { TextStyle, Text } from '@pixi/text';
import { Signal } from 'typed-signals';
import { Padding } from './utils/HelpTypes';
export type InputOptions = {
    bg?: Container | string;
    textStyle?: Partial<TextStyle>;
    placeholder?: string;
    value?: string;
    maxLength?: number;
    align?: 'left' | 'center' | 'right';
    padding?: Padding;
};
/**
 * Container-based component that creates an input to read the user's text.
 * @example
 * new Input({
 *     bg: Sprite.from('input.png'),
 *     placeholder: 'Enter text',
 *     padding: {
 *      top: 11,
 *      right: 11,
 *      bottom: 11,
 *      left: 11
 *     } // alternatively you can use [11, 11, 11, 11] or [11, 11] or just 11
 * });
 */
export declare class Input extends Container {
    protected _bg?: Container;
    protected _cursor: Sprite;
    protected inputMask: Graphics;
    protected inputField: Text;
    protected placeholder: Text;
    protected editing: boolean;
    protected tick: number;
    protected activation: boolean;
    protected readonly options: InputOptions;
    /** Fires when input loses focus. */
    onEnter: Signal<(text: string) => void>;
    /** Fires every time input string is changed. */
    onChange: Signal<(text: string) => void>;
    /** Top side padding */
    paddingTop: number;
    /** Right side padding */
    paddingRight: number;
    /** Bottom side padding */
    paddingBottom: number;
    /** Left side padding */
    paddingLeft: number;
    constructor(options: InputOptions);
    protected init(): void;
    set bg(bg: Container | string);
    get bg(): Container | string;
    protected _add(key: string): void;
    protected _delete(): void;
    protected _startEditing(): void;
    protected handleActivation(): void;
    protected stopEditing(): void;
    protected update(dt: number): void;
    protected align(): void;
    protected getAlign(): 0 | 1 | 0.5;
    protected getCursorPosX(): number;
    /** Sets the input text. */
    set value(text: string);
    /** Return text of the input. */
    get value(): string;
    /**
     * Set paddings
     * @param value - number, array of 4 numbers or object with keys: top, right, bottom, left
     * or: [top, right, bottom, left]
     * or: [top&bottom, right&left]
     * or: {
     *  left: 10,
     *  right: 10,
     *  top: 10,
     *  bottom: 10,
     * }
     */
    set padding(value: Padding);
    get padding(): [number, number, number, number];
}
//# sourceMappingURL=Input.d.ts.map