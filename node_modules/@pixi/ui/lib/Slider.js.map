{"version":3,"file":"Slider.js","sources":["../src/Slider.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Signal } from 'typed-signals';\n\nimport type { DragObject } from './utils/HelpTypes';\nimport { BaseSliderOptions, SliderBase } from './SliderBase';\n\nexport type SliderOptions = BaseSliderOptions & {\n    slider: Container | string;\n    value?: number;\n};\n\n/**\n * Creates a slider to select a single value.\n * @example\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     console.log(`Slider changed to ${value}`);\n * });\n */\nexport class Slider extends SliderBase\n{\n    protected options: SliderOptions;\n\n    /** Fires when value is changing, on every move of slider. */\n    onUpdate: Signal<(value: number) => void> = new Signal();\n\n    /** Fires when value changed, only when slider is released. */\n    onChange: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super({\n            bg: options.bg,\n            slider1: options.slider,\n            fill: options.fill ?? '',\n            min: options.min,\n            max: options.max,\n            value1: options.value,\n            valueTextStyle: options.valueTextStyle,\n            showValue: options.showValue,\n            valueTextOffset: options.valueTextOffset,\n            fillOffset: options.fillOffset,\n        });\n\n        this.options = options;\n\n        this.progress = ((options.value ?? this.min) - this.min) / (this.max - this.min) * 100;\n\n        this.value = options.value ?? this.min;\n    }\n\n    /** Return selected value. */\n    get value(): number\n    {\n        return this._value1;\n    }\n\n    /** Set selected value. */\n    set value(value: number)\n    {\n        if (value === this._value1) return;\n\n        if (value < this.min) value = this.min;\n        if (value > this.max) value = this.max;\n\n        this._value1 = value;\n\n        this.updateSlider();\n\n        this.onUpdate?.emit(this.value);\n    }\n\n    /** Set slider instance ot texture. */\n    // eslint-disable-next-line accessor-pairs\n    set slider(value: Container | string)\n    {\n        this.slider1 = value;\n        this.updateSlider();\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        this.progress = this.validate((x / this.bg.width) * 100);\n        this.value = this.min + (((this.max - this.min) / 100) * this.progress);\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value);\n    }\n\n    protected updateSlider()\n    {\n        this._slider1.x = ((this.bg.width - this._slider1.width) / 100) * this.progress;\n\n        if (this.options.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n    }\n}\n"],"names":["SliderBase","Signal"],"mappings":"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"}