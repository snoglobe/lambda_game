{"version":3,"file":"Button.js","sources":["../src/Button.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { ButtonEvents } from './ButtonEvents';\nimport { Mixin } from 'ts-mixer';\n\n/**\n * Adds button events to a given container-based view\n *\n * so you can subscribe to them and use your container-based instance as a button.\n * @example\n * const container = new Container();\n * const button = new Button(\n *      new Graphics()\n *          .beginFill(0xFFFFFF)\n *          .drawRoundedRect(0, 0, 100, 50, 15)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button.view);\n * // or container.addChild(container); which is the same\n */\nexport class Button extends ButtonEvents\n{\n    /** Container, given as a constructor parameter that is a button view. */\n    protected _view: Container;\n\n    /**\n     * Turns a given container-based view into a button by adding all button events.\n     * @param {Container} view - instance of container, to be turned into button.\n     */\n    constructor(view?: Container)\n    {\n        super();\n\n        if (view) this.init(view);\n    }\n\n    /**\n     * Creates and connect interaction events.\n     * @param {Container} view - instance of container, to be turned into button\n     */\n    init(view: Container)\n    {\n        this.view = view;\n        this.enabled = true;\n    }\n\n    /** Set button view, thar all the interaction events are applied to. */\n    set view(view: Container)\n    {\n        const wasItInitiated = !!this._view;\n\n        if (wasItInitiated) this.disconnectEvents(view);\n\n        this._view = view;\n        this.connectEvents(view);\n\n        if (!wasItInitiated) this.enabled = true;\n    }\n\n    /** Get button view, thar all the interaction events are applied to. */\n    get view(): Container\n    {\n        return this._view;\n    }\n\n    /**\n     * Switcher, which prevents all button events from firing if off.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        if (!this.view)\n        {\n            console.error('Button view is not set. Please set it before enabling the button.');\n\n            return;\n        }\n\n        this.view.eventMode = enabled ? 'static' : 'auto';\n        this.view.cursor = enabled ? 'pointer' : 'default';\n\n        if (!enabled && this.isDown)\n        {\n            this.processUp();\n        }\n    }\n\n    /** Getter that returns button state. */\n    get enabled(): boolean\n    {\n        return this.view.eventMode === 'static';\n    }\n}\n\n/**\n * Button based on container. You can use it same {@link Button}\n * but without need to pre create a container and interact with it through `.view` accessor.\n * @example\n * const button = new ButtonContainer(\n *      new Graphics()\n *          .beginFill(0xFFFFFF)\n *          .drawRoundedRect(0, 0, 100, 50, 15)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button);\n */\nexport class ButtonContainer extends Mixin(Container, Button)\n{\n    constructor(view?: Container)\n    {\n        super();\n\n        if (view)\n        {\n            this.init(view);\n        }\n    }\n\n    /**\n     * Initialize button.\n     * @param {Container} view\n     */\n    override init(view: Container)\n    {\n        this.addChild(view);\n        this.view = view;\n        this.enabled = true;\n    }\n}\n"],"names":["ButtonEvents","Mixin","Container"],"mappings":";;;;;;AAqBO,MAAM,eAAeA,yBAC5B,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQI,YAAY,IACZ,EAAA;AACI,IAAM,KAAA,EAAA,CAAA;AAEN,IAAI,IAAA,IAAA;AAAM,MAAA,IAAA,CAAK,KAAK,IAAI,CAAA,CAAA;AAAA,GAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,KAAK,IACL,EAAA;AACI,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AAAA,GACnB;AAAA;AAAA,EAGA,IAAI,KAAK,IACT,EAAA;AACI,IAAM,MAAA,cAAA,GAAiB,CAAC,CAAC,IAAK,CAAA,KAAA,CAAA;AAE9B,IAAI,IAAA,cAAA;AAAgB,MAAA,IAAA,CAAK,iBAAiB,IAAI,CAAA,CAAA;AAE9C,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,IAAA,IAAA,CAAK,cAAc,IAAI,CAAA,CAAA;AAEvB,IAAA,IAAI,CAAC,cAAA;AAAgB,MAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AAAA,GACxC;AAAA;AAAA,EAGA,IAAI,IACJ,GAAA;AACI,IAAA,OAAO,IAAK,CAAA,KAAA,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,QAAQ,OACZ,EAAA;AACI,IAAI,IAAA,CAAC,KAAK,IACV,EAAA;AACI,MAAA,OAAA,CAAQ,MAAM,mEAAmE,CAAA,CAAA;AAEjF,MAAA,OAAA;AAAA,KACJ;AAEA,IAAK,IAAA,CAAA,IAAA,CAAK,SAAY,GAAA,OAAA,GAAU,QAAW,GAAA,MAAA,CAAA;AAC3C,IAAK,IAAA,CAAA,IAAA,CAAK,MAAS,GAAA,OAAA,GAAU,SAAY,GAAA,SAAA,CAAA;AAEzC,IAAI,IAAA,CAAC,OAAW,IAAA,IAAA,CAAK,MACrB,EAAA;AACI,MAAA,IAAA,CAAK,SAAU,EAAA,CAAA;AAAA,KACnB;AAAA,GACJ;AAAA;AAAA,EAGA,IAAI,OACJ,GAAA;AACI,IAAO,OAAA,IAAA,CAAK,KAAK,SAAc,KAAA,QAAA,CAAA;AAAA,GACnC;AACJ,CAAA;AAgBO,MAAM,eAAwB,SAAAC,aAAA,CAAMC,iBAAW,EAAA,MAAM,CAC5D,CAAA;AAAA,EACI,YAAY,IACZ,EAAA;AACI,IAAM,KAAA,EAAA,CAAA;AAEN,IAAA,IAAI,IACJ,EAAA;AACI,MAAA,IAAA,CAAK,KAAK,IAAI,CAAA,CAAA;AAAA,KAClB;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMS,KAAK,IACd,EAAA;AACI,IAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;AAClB,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AAAA,GACnB;AACJ;;;;;"}